{"version":3,"sources":["AppStores/LayerInfoStore.js","AppStores/ModelStore.js","Components/LayerCard.js","AppStores/TreePosStore.js","Components/LayerTree.js","AppStores/EditModelDialogContext.js","Components/Header.js","AppStores/EditLayerDialogContext.js","AppStores/CurrentLayerContext.js","Components/Dialogs/EditLayer.js","AppStores/ModelTrainStore.js","AppStores/ServeModelFileContext.js","Components/Dialogs/EditModel.js","AppStores/ChooseDatasetDialogContext.js","Components/Dialogs/ChooseDataset.js","client.js","TensorShow.js","index.js"],"names":["LayerInfoStoreStateContext","React","createContext","LayerInfoStoreDispatchContext","LayerInfoStoreProvider","children","useReducer","state","action","type","layerID","layer_info","inModel","console","log","JSON","parse","stringify","Object","assign","model_key","layer_name","layer_type","parent_pos","position","row","group","slot","layer_params","dataset_name","shape","labels","layerInfoStoreState","layerInfoStoreDispatch","Provider","value","useLayerInfoStoreState","context","useContext","undefined","alert","useLayerInfoStoreDispatch","ModelStoreStateContext","ModelStoreDispatchContext","ModelStoreProvider","status","model_name","layerIDs","modelID","modelState","setModelState","useModelStoreState","useModelStoreDispatch","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","height","width","backgroundColor","rootModel","header","paddingTop","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","editButton","marginTop","addLayerButton","contentBox","borderRadius","contentBoxModel","contentDivider","left","top","borderLeft","labelBox","paddingRight","justifyContent","valueBox","paddingLeft","LayerCard","params","label_value_obj","values","classes","modelStoreState","layerInfoStore","window","channels","stride","x","activation","regularization","pooling","output","units","length","edit_layer_button","Button","size","className","variant","onClick","event","editLayer","sender_pos","choose_dataset_button","chooseDataset","edit_model_button","editModel","add_layer_button","addChild","top_button","Typography","align","content_view","Paper","map","label","bottom_button","last_layer","TreePosStoreStateContext","TreePosStoreDispatchContext","propogateWidth","PositionTree","row_position","group_key_ind","slot_key_ind","group_key","slot_key","slot_keys","child_group","running_offset","child_row_pos","parent_row_pos","new_tree","child_group_keys","keys","rows","groups","sort","slots","disp","tree","row_pos","group_keys","running_width","updateRow","sender_group","sender_slot","pruneGroup","group_pos","delete_group","render","pruneRow","delete_row","TreePosReducer","new_state","sender_row","deleteNode","slot_pos","child_row_key","child_group_key","child_group_slots","parent_group_keys","parent_slot_keys","parent_row_key","parent_group_key","parent_slot_key","tmp_parent_row","tmp_parent_group","parent_row_keys","i","parseInt","j","k","y","0","active_connections","maximum_row","Math","max","parent_group_pos","parent_slot_pos","parent_slot","group_path","slot_path","child_group_pos","child_slot_pos","connection","push","TreePosStoreProvider","init_card_pos","treePosStoreState","treePosStoreDispatch","useTreePosStoreState","LayerTree","style","row_key","row_svg","group_svg","slot_svg","group_count","slot_count","start_point","end_point","tmp_slot_keys","tmp_slot","tmp_group","cardPosState","bezier_points","canvas_elements","row_svgs","pos_tree","row_keys","row_count","group_svgs","slot_svgs","textAlign","key","canv_params","start_y","end_y","start_x","end_x","q","stroke","strokeWidth","fill","d","zIndex","TreeSVG","EditModelDialogStateContext","EditModelDialogDispatchContext","EditModelDialogContextProvider","useState","open","editModelDialog","setEditModelDialog","useEditModelDialogDispatch","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","marginRight","title","flexGrow","hide","drawer","flexShrink","drawerPaper","drawerHeader","padding","spacing","mixins","toolbar","Header","setOpen","CssBaseline","AppBar","clsx","Toolbar","noWrap","IconButton","color","aria-label","edge","Drawer","anchor","paper","Divider","List","ListItem","ListItemText","primary","text","index","button","ListItemIcon","EditLayerDialogStateContext","EditLayerDialogDispatchContext","EditLayerDialogContextProvider","openDialog","setOpenDialog","useEditLayerDialogDispatch","CurrentLayerStateContext","CurrentLayerDispatchContext","CurrentLayerContextProvider","currentLayer","setCurrentLayer","useCurrentLayerDispatch","layerNameTextField","margin","minWidth","layerTypeSelectControl","paramTextFieldGroup","paramTextField","maxWidth","layer_type_map","onlyUnique","self","indexOf","EditLayer","useEditLayerDialogState","dialog_type","dialogDispatch","currentLayerState","useCurrentLayerState","currentLayerDispatch","treePosState","treePosDispatch","useTreePosStoreDispatch","modelStoreDispatch","sender_pos_key","sender_info","sender_layer_name","sender_layer_type","sender_layer_params","disable_last_layer","parameter_window","dialog_button_group","next_layer_options","parent_layer_type","getNextLayerOptions","nextLayerName","setNextLayerName","nextLayerType","setNextLayerType","modelName","setModelName","handleCancel","preventDefault","windowWidth","setWindowWidth","windowHeight","setWindowHeight","windowChannels","setWindowChannels","windowParams","TextField","InputLabelProps","shrink","helperText","onChange","target","strideX","setStrideX","strideY","setStrideY","strideParams","outputUnits","setOutputUnits","disableOutputUnits","setDisableOutputUnits","lastLayer","setLastLayer","fullParams","disabled","FormControlLabel","control","Checkbox","checked","defaultValue","activationType","setActivationType","regularizationType","setRegularizationType","activationParams","FormControl","Select","labelId","MenuItem","FormHelperText","pooling_types","poolingType","setPoolingType","poolingParams","pullConvParams","pullPoolParams","pullFullParams","DialogActions","next_layer_params","editModelLayer","layer_key","parent_node","filter","pop","connection_pos","new_sender_pos","model_card_position_key","new_layer_pos_key","addModel","useEffect","Dialog","onClose","DialogTitle","float","DialogContent","InputLabel","id","displayEmpty","ModelTrainStoreStateContext","ModelTrainStoreDispatchContext","ModelTrainStoreProvider","metrics","accuracy","loss","progress","modelTrainState","setModelTrainState","ServeModelFileStateContext","ServeModelFileDispatchContext","ServeModelFileProvider","modelFile","setModelFile","modelActionPanel","marginLeft","modelActionPanelShift","modelActionPanelTitle","modelActionPanelSub","resultsWindow","lossGraphWindow","accuracyGraphWindow","EditModel","useEditModelDialogState","editModelDialogDispatch","editLayerDialogDispatch","layerInfoState","serveModelFileState","useServeModelFileState","numEpochs","setNumEpochs","batchSize","setBatchSize","optimizerType","setOptimizerType","openViewLayers","setOpenViewLayers","model","checkAddButton","param","handleEditLayer","layer_list","secondary","view_layers_dialog","model_info_window","reqModelFile","require","fileDownload","model_file","getModelDownload","training_window","trainModel","num_epochs","batch_size","optimizer_type","modek_key","ChooseDatasetDialogStateContext","ChooseDatasetDialogDispatchContext","ChooseDatasetDialogContextProvider","useChooseDatasetDialogState","useChooseDatasetDialogDispatch","ChooseDataset","datasetDialogDispatch","setDataset","choose_dataset_window","ListItemSecondaryAction","socket","emitModel","emit","data","TensorShow","editModelDispatch","chooseDatasetDialogDispatch","serveModelFileDispatch","useServeModelFileDispatch","on","tmp_layer_key","model_layers","tmp_parent_pos","layer_pos_key","reverse","emitTrain","requestModelFile","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c7ec1cc3.chunk.js","sourcesContent":["import React from 'react';\n\nconst LayerInfoStoreStateContext = React.createContext(null);\nconst LayerInfoStoreDispatchContext = React.createContext(null);\n\nconst LayerInfoStoreProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [layerInfoStoreState, layerInfoStoreDispatch] = React.useReducer((state, action) => {\n\n    switch (action.type) {\n      case 'add': {\n        state[[action.layerID]] = action.layer_info;\n        state[[action.layerID]].inModel = false;\n        return state;\n      }\n      case 'delete': {\n        delete state[[action.layerID]];\n        return state;\n      }\n      case 'update': {\n        console.log(JSON.parse(JSON.stringify(state)))\n        state[[action.layerID]] = Object.assign({}, state[[action.layerID]], action.layer_info);\n                console.log(JSON.parse(JSON.stringify(state)))\n\n        return state;\n      }\n      case 'add_to_model': {\n        state[[action.layerID]].inModel = action.model_key;\n        return state;\n      }\n    }\n  }, {\n    \"000\": {\n      layer_name: 'Input Layer',\n      layer_type: 'input_layer',\n      parent_pos: 'root',\n      inModel: false,\n      position: {\n        row: 0,\n        group: 0,\n        slot: 0\n      },\n      layer_params: {\n        dataset_name: \"\",\n        shape: \"\",\n        labels: \"\"\n      }\n    }\n  })\n\n\treturn (\n\t\t<LayerInfoStoreStateContext.Provider value={ layerInfoStoreState }>\n\t\t\t<LayerInfoStoreDispatchContext.Provider value={ layerInfoStoreDispatch }>\n\t\t\t\t{children}\n\t\t\t</LayerInfoStoreDispatchContext.Provider>\n\t\t</LayerInfoStoreStateContext.Provider>\n\t)\n}\n\nconst useLayerInfoStoreState = () => {\n  const context = React.useContext(LayerInfoStoreStateContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerState in LayerInfoStoreStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useLayerInfoStoreDispatch = () => {\n  const context = React.useContext(LayerInfoStoreDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerDispatch in LayerInfoStoreDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { LayerInfoStoreProvider, useLayerInfoStoreState, useLayerInfoStoreDispatch };","import React from 'react';\n\nconst ModelStoreStateContext = React.createContext(null);\nconst ModelStoreDispatchContext = React.createContext(null);\n\nconst ModelStoreProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [modelState, setModelState] = React.useReducer((state, action) => {\n\n\t\tswitch (action.type) {\n\t\t\tcase 'add_model': {\n\t\t\t\tstate[[action.model_key]] = {\n\t\t\t\t\tstatus: 'init',\n\t\t\t\t\tmodel_name: action.model_name,\n\t\t\t\t\tlayerIDs: action.layerIDs\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tcase 'delete_model': {\n\t\t\t\tdelete state[[action.modelID]]\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tcase 'update_status': {\n\t\t\t\tstate[[action.model_key]].status = action.status\n\t\t\t}\n\n\t\t\t\n\t\t}\n\n\t}, {})\n\n\treturn (\n\t\t<ModelStoreStateContext.Provider value={ modelState }>\n\t\t\t<ModelStoreDispatchContext.Provider value={ setModelState }>\n\t\t\t\t{children}\n\t\t\t</ModelStoreDispatchContext.Provider>\n\t\t</ModelStoreStateContext.Provider>\n\t)\n}\n\nconst useModelStoreState = () => {\n  const context = React.useContext(ModelStoreStateContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerState in ModelStoreStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useModelStoreDispatch = () => {\n  const context = React.useContext(ModelStoreDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerDispatch in ModelStoreDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { ModelStoreProvider, useModelStoreState, useModelStoreDispatch };","import React from 'react';\n\n// Import Styling Tools\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Import Components\nimport {\n\tPaper,\n\tButton,\n\tTypography\n} from '@material-ui/core';\n\n// Subscribe to LayerInfo Context\nimport { useLayerInfoStoreState, useLayerInfoStoreDispatch } from '../AppStores/LayerInfoStore';\nimport { useModelStoreState, useModelStoreDispatch } from '../AppStores/ModelStore';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"center\",\n\t\theight: 275,\n\t\twidth: 250,\n\t\tbackgroundColor: \"#f5f5f5\"\n\t},\n\trootModel: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"center\",\n\t\theight: 150,\n\t\twidth: 250,\n\t\tbackgroundColor: \"#f5f5f5\"\n\t},\n\theader: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"center\",\n\t\tpaddingTop: 5,\n\t\theight: 70,\n\t\twidth: \"100%\",\n\t\tborderBottomLeftRadius: 20,\n\t\tborderBottomRightRadius: 20,\n\t\tboxShadow: \"0px 2px 2px grey\",\n\t\tbackgroundColor: \"#ff911c\"\n\t},\n\teditButton: {\n\t\tmarginTop: 1,\n\t\twidth: \"60%\",\n\t\tbackgroundColor: \"#bf711d\"\n\t},\n\taddLayerButton: {\n\t\tmarginTop: 10,\n\t\twidth: \"60%\",\n\t},\n\n\tcontentBox: {\n\t\tposition: 'relative',\n\t\tmarginTop: 10,\n\t\theight: 150,\n\t\twidth: 240,\n\t\tborderRadius: 10,\n\t\tboxShadow: \"0px 2px 2px grey\",\n\t\t// backgroundColor: \"#e6e6e6\"\n\n\t},\n\tcontentBoxModel: {\n\t\tposition: 'relative',\n\t\tmarginTop: 10,\n\t\theight: 100,\n\t\twidth: 240,\n\t\tborderRadius: 10,\n\t\tboxShadow: \"0px 2px 2px grey\",\n\t\t// backgroundColor: \"#e6e6e6\"\n\n\t},\n\tcontentDivider: {\n\t\tposition: 'absolute',\n\t\tleft: \"47.5%\",\n\t\ttop: \"5%\",\n\t\tborderLeft: '2px solid black',\n\t\theight: \"90%\"\n\t},\n\n\tlabelBox: {\n\t\tposition: \"absolute\",\n\t\tpaddingRight: 5,\n\t\ttop: 0,\n\t\tleft: 0,\n\t\theight: \"100%\",\n\t\twidth: \"45%\",\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"flex-end\",\n\t\tjustifyContent: \"space-evenly\"\n\t},\n\n\tvalueBox: {\n\t\tposition: \"absolute\",\n\t\tpaddingLeft: 10,\n\t\ttop: 0,\n\t\tleft: \"50%\",\n\t\theight: \"100%\",\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"flex-start\",\n\t\tjustifyContent: \"space-evenly\"\n\t},\n\n\n}))\n\nexport default function LayerCard(params) {\n\tconst classes = useStyles();\n\n\tconst modelStoreState = useModelStoreState();\n\tconst layerInfoStore = useLayerInfoStoreState();\n  const layerInfoDispatch = useLayerInfoStoreDispatch();\n\n\tconst layer_info = layerInfoStore[params.layerID]\n\n\t// Extract Parameters\n\tconst layer_name = layer_info.layer_name;\n\tconst layer_type = layer_info.layer_type;\n\tconst layer_params = layer_info.layer_params;\n\n\t///////////////////////////////////////////////\n\t// Helper functions for Extracting Params\n\t///////////////////////////////////////////////\n\tconst extract_input_params = () => {\n\t\t\n\t\tconst dataset_label = \"Dataset Name\"\n\t\tconst dataset_value = layer_params.dataset_name\n\n\t\tconst shape_label = \"Dataset Shape\"\n\t\tconst shape_value = layer_params.shape\n\n\t\tconst labels_label = 'Dataset Labels'\n\t\tconst labels_value = layer_params.labels\n\n\t\treturn {\n\t\t\tlabels: [dataset_label, shape_label, labels_label],\n\t\t\tvalues: [dataset_value, shape_value, labels_value]\n\t\t}\n\t}\n\n\tconst extract_conv_params = () => {\n\t\t\n\t\tconst window_label = \"Window Shape\"\n\t\tconst window_value = `${layer_params.window.width} x ${layer_params.window.height} x ${layer_params.window.channels}`\n\n\t\tconst stride_label = \"Window Stride\"\n\t\tconst stride_value = `X: ${layer_params.stride.x}, Y: ${layer_params.stride.x}`\n\n\t\tconst activation_label = 'Activation';\n\t\tconst activation_value = layer_params.activation;\n\n\t\tconst reg_label = 'Regularization'\n\t\tconst reg_value = layer_params.regularization;\n\n\t\treturn {\n\t\t\tlabels: [window_label, stride_label, activation_label, reg_label],\n\t\t\tvalues: [window_value, stride_value, activation_value, reg_value]\n\t\t}\n\t}\n\n\tconst extract_pool_params = () => {\n\n\t\tconst window_label = \"Window Shape\"\n\t\tconst window_value = `${layer_params.window.width} x ${layer_params.window.height} x ${layer_params.window.channels}`\n\n\t\tconst stride_label = \"Window Stride\"\n\t\tconst stride_value = `X: ${layer_params.stride.x}, Y: ${layer_params.stride.x}`\n\n\t\tconst pooling_label = \"Pooling\"\n\t\tconst pooling_value = layer_params.pooling\n\n\n\t\treturn {\n\t\t\tlabels: [window_label, stride_label, pooling_label],\n\t\t\tvalues: [window_value, stride_value, pooling_value]\n\t\t}\n\t}\n\n\tconst extract_full_params = () => {\n\t\t\n\t\tconst output_label = \"Output Units\"\n\t\tconst output_value = layer_params.output.units;\n\n\t\tconst activation_label = 'Activation';\n\t\tconst activation_value = layer_params.activation;\n\n\t\tconst reg_label = 'Regularization'\n\t\tconst reg_value = layer_params.regularization;\n\n\n\t\treturn {\n\t\t\tlabels: [output_label, activation_label, reg_label],\n\t\t\tvalues: [output_value, activation_value, reg_value]\n\t\t}\n\t}\n\n\tvar label_value_obj;\n\tvar labels, values;\n\tswitch (layer_type) {\n\t\tcase (\"input_layer\"): {\n\t\t\tlabel_value_obj = extract_input_params();\n\t\t\tbreak;\n\t\t}\n\t\tcase (\"conv_layer\"): {\n\t\t\tlabel_value_obj = extract_conv_params();\n\t\t\tbreak;\n\t\t}\n\t\tcase (\"pool_layer\"): {\n\t\t\tlabel_value_obj = extract_pool_params();\n\t\t\tbreak;\n\t\t}\n\t\tcase (\"full_layer\"): {\n\t\t\tlabel_value_obj = extract_full_params();\n\t\t\tbreak;\n\t\t}\n\t\tcase (\"model\"): {\n\t\t\tlabel_value_obj = {\n\t\t\t\t'labels': [\"Model Depth\"],\n\t\t\t\t'values': [modelStoreState[params.layerID].layerIDs.length - 1]\n\t\t\t}\n\t\t}\n\t}\n\n\tlabels = label_value_obj.labels;\n\tvalues = label_value_obj.values;\n\n\t///////////////////////////////////////////////\n\t// Dialog Components\n\t///////////////////////////////////////////////\n\tconst edit_layer_button = (\n\t\t<Button size=\"small\" className={classes.editButton} variant=\"contained\"\n\t\t\tonClick={(event) => params.editLayer(event, params.sender_pos)}>\n\t\t\tEdit Layer\n\t\t</Button>\n\t);\n\n\tconst choose_dataset_button = (\n\t\t<Button size=\"small\" className={classes.editButton} variant=\"contained\"\n\t\t\tonClick={(event) => params.chooseDataset(event)}>\n\t\t\tChoose Dataset\n\t\t</Button>\n\t);\n\n\tconst edit_model_button = (\n\t\t<Button size=\"small\" className={classes.editButton} variant=\"contained\"\n\t\t\tonClick={(event) => params.editModel(event, params.layerID)}>\n\t\t\tView Model\n\t\t</Button>\n\t);\n\n\tconst add_layer_button = (\n\t\t<Button size=\"small\" className={classes.addLayerButton} variant=\"contained\" \n\t\t\tonClick={(event) => params.addChild(event, params.sender_pos)}>\n\t\t\tAdd Layer\n\t\t</Button>\n\t);\n\n\tvar top_button = edit_layer_button;\n\tif (layer_type === \"input_layer\") {\n\t\ttop_button = choose_dataset_button;\n\t} else if (layer_type === \"model\") {\n\t\ttop_button = edit_model_button;\n\t}\n\tconst header = (\n\t\t<div className={classes.header}>\n\t\t\t<Typography variant=\"h6\" align=\"center\">{layer_name}</Typography>\n\t\t\t{top_button}\n\t\t</div>\n\t)\n\n\tconst content_view = (\n\t\t<Paper className={(layer_type === \"model\") ? classes.contentBoxModel : classes.contentBox}>\n\t\t\t<div className={classes.labelBox}>\n\t\t\t\t{labels.map(label => (<Typography variant=\"body2\">{label}</Typography>))}\n\t\t\t</div>\n\t\t\t<div className={classes.contentDivider}/>\n\t\t\t<div className={classes.valueBox}>\n\t\t\t{values.map(value => (<Typography variant=\"body2\">{value}</Typography>))}\n\t\t\t</div>\n\t\t</Paper>\n\t);\n\n\tlet bottom_button = add_layer_button;\n\tif (layer_type === \"full_layer\") {\n\t\tif (layer_params.last_layer) {\n\t\t\tbottom_button = null;\n\t\t}\n\t} else if (layer_type === \"model\") {\n\t\tbottom_button = null;\n\t}\n\n\treturn (\n\t\t<Paper className={(layer_type === \"model\")? classes.rootModel: classes.root}>\n\t\t\t{header}\n\t\t\t{content_view}\n\t\t\t{bottom_button}\n\t\t</Paper>\n\t);\n}","import React from 'react';\n\nconst TreePosStoreStateContext = React.createContext(null);\nconst TreePosStoreDispatchContext = React.createContext(null);\n\n////////////////////////////////////////////////////////////////////////\n// Set Constants\n////////////////////////////////////////////////////////////////////////\nconst SLOT_HEIGHT = 300;\nconst SLOT_WIDTH = 300;\n\nconst ROW_INIT = 0;\nconst ROW_DIFF = 350;\n\n\n\nconst updateRow= (tree, row_pos) => {\n\n  // Declare Variables  \n  var group_keys, slot_keys;\n  var group_key_ind, slot_key_ind;\n  var group_key, slot_key;\n\n  ////////////////////////////////////////////////////////////////////////\n  // 1) Update Group Width\n  ////////////////////////////////////////////////////////////////////////\n  // Iterate over groups in row\n  group_keys = Object.keys(tree.rows[row_pos].groups);\n  group_keys.sort()\n  var running_width;\n  for (group_key_ind=0; group_key_ind<group_keys.length; group_key_ind++) {\n    running_width = 0;\n    group_key = group_keys[group_key_ind];\n    slot_keys = Object.keys(tree.rows[row_pos].groups[group_key].slots)\n\n    // Iterate over slots in group\n    for (slot_key_ind=0; slot_key_ind<slot_keys.length; slot_key_ind++) {\n      slot_key = slot_keys[slot_key_ind];\n      running_width += tree.rows[row_pos].groups[group_key].slots[slot_key].disp.width;\n    }\n\n    // Update group width\n    tree.rows[row_pos].groups[group_key].disp.width = running_width;\n  }\n\n  ////////////////////////////////////////////////////////////////////////\n  // 2) Update Groups Offset\n  ////////////////////////////////////////////////////////////////////////\n  var running_offset = 0;\n\n  // Iterate over groups in row\n  group_keys = Object.keys(tree.rows[row_pos].groups);\n  group_keys.sort()\n  for (group_key_ind=0; group_key_ind<group_keys.length; group_key_ind++) {\n    group_key = group_keys[group_key_ind];\n\n    // 1) Update width with current running offset\n    tree.rows[row_pos].groups[group_key].disp.x = running_offset;\n\n    // 2) Add this groups width to running offset\n    running_offset += tree.rows[row_pos].groups[group_key].disp.width;\n  }\n\n  ////////////////////////////////////////////////////////////////////////\n  // 3) Update Row Width\n  ////////////////////////////////////////////////////////////////////////\n  // Set the row width to the running total of the group offsets\n  tree.rows[row_pos].disp.width = running_offset;\n\n  return tree;\n\n}\n\nconst propogateWidth = (PositionTree, row_position) => {\n\n \n  // Pull Child Position Attributes\n  const child_row_pos = row_position;\n\n  // Calculate Parent Position Attributes\n  const parent_row_pos = child_row_pos - 1;\n\n\n  let new_tree = { ...PositionTree };\n\n  var group_key_ind, slot_key_ind;\n  var group_key, slot_key;\n  var slot_keys;\n  var child_group, child_slot, parent_group, parent_slot;\n\n  \n\n  ////////////////////////////////////////////////////////////////////////\n  // 1) Update Child Slot Offsets\n  ////////////////////////////////////////////////////////////////////////\n  // Update slot offsets (iterate over slot widths)\n  var child_group_keys = Object.keys(new_tree.rows[child_row_pos].groups);\n  child_group_keys.sort()\n\n  // Iterate over groups in child row\n  var running_offset;\n  for (group_key_ind=0; group_key_ind<child_group_keys.length; group_key_ind++) {\n    running_offset = 0;\n    group_key = child_group_keys[group_key_ind];\n    slot_keys = Object.keys(new_tree.rows[child_row_pos].groups[group_key].slots).sort()\n\n    for (slot_key_ind=0; slot_key_ind<slot_keys.length; slot_key_ind++) {\n      slot_key = slot_keys[slot_key_ind];\n\n      // 1) Update width with current running offset\n      new_tree.rows[child_row_pos].groups[group_key].slots[slot_key].disp.x = running_offset;\n\n      // 2) Add this groups width to running offset\n      running_offset += new_tree.rows[child_row_pos].groups[group_key].slots[slot_key].disp.width;\n\n    }\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////\n  // 2) Update Child Row\n  ////////////////////////////////////////////////////////////////////////\n  // a) Update group width\n  // b) Update groups offset\n  // c) Update row width\n  new_tree = updateRow(new_tree, child_row_pos);\n\n  ////////////////////////////////////////////////////////////////////////\n  // BASE CASE: Child Row is already 0\n  ////////////////////////////////////////////////////////////////////////\n  if (parent_row_pos == -1) {\n    // // console.log(\"Returning\")\n    return new_tree;\n  }\n\n  // ////////////////////////////////////////////////////////////////////////\n  // // 3) Update Parent Slot Width Offsets\n  // ////////////////////////////////////////////////////////////////////////\n  for (group_key_ind=0; group_key_ind<child_group_keys.length; group_key_ind++) {\n    group_key = child_group_keys[group_key_ind];\n    child_group = new_tree.rows[child_row_pos].groups[group_key]\n\n    // Find parent slot\n    group_key = child_group.sender_group;\n    slot_key = child_group.sender_slot;\n\n    // Set parent slot width\n    new_tree.rows[child_row_pos - 1].groups[group_key].slots[slot_key].disp.width = child_group.disp.width\n\n\n  }\n\n  return propogateWidth(new_tree, parent_row_pos); \n}\n\nconst deleteNode = (tree, row_pos, group_pos, slot_pos) => {\n  // console.log(\"Deleting from\", row_pos, group_pos, slot_pos)\n\n  var child_row_key = row_pos + 1;\n  if (tree.rows[child_row_key] === undefined) {\n    // console.log(\"DELETING SLOT\", row_pos, group_pos, slot_pos)\n    delete tree.rows[row_pos].groups[group_pos].slots[slot_pos];\n    tree = pruneGroup(tree, row_pos, group_pos)\n    tree = pruneRow(tree, row_pos);\n    return tree;\n  }\n  var child_group_key = `${group_pos}${slot_pos}`;\n  if (tree.rows[child_row_key].groups[child_group_key] === undefined) {\n    // console.log(\"DELETING SLOT\", row_pos, group_pos, slot_pos)\n    delete tree.rows[row_pos].groups[group_pos].slots[slot_pos];\n    tree = pruneGroup(tree, row_pos, group_pos)\n    tree = pruneRow(tree, row_pos);\n    return tree;\n  }\n  var child_group_slots = Object.keys(tree.rows[child_row_key].groups[child_group_key].slots)\n  var slot_key_ind, slot_key;\n  for (slot_key_ind=0; slot_key_ind<child_group_slots.length; slot_key_ind++) {\n    slot_key = child_group_slots[slot_key_ind];\n\n    // Call delete node on all children\n    tree = deleteNode(tree, child_row_key, child_group_key, slot_key)\n  }\n\n  // Always delete the sender\n  // console.log(\"DELETING SLOT\", row_pos, group_pos, slot_pos)\n  delete tree.rows[row_pos].groups[group_pos].slots[slot_pos];\n\n  // Check if we should delete the group\n\n  if (Object.keys(tree.rows[row_pos].groups[group_pos].slots).length === 0) {\n    // console.log(\"DELETING GROUP\", row_pos, group_pos)\n    delete tree.rows[row_pos].groups[group_pos];\n  }\n\n  tree = pruneGroup(tree, row_pos, group_pos)\n  tree = pruneRow(tree, row_pos);\n\n  return tree;\n\n}\n\nconst pruneGroup = (tree, row_position, group_pos) => {\n  // console.log(\"Pruning Group From\", row_position, group_pos)\n\n  // Iterate over slots in group to see if the group should be pruned\n  var slot_keys, slot_key_ind, slot_key;\n\n  if (tree.rows[row_position].groups[group_pos] === undefined) {\n    return tree;\n  }\n  slot_keys = Object.keys(tree.rows[row_position].groups[group_pos].slots)\n\n  var delete_group = true;\n  for (slot_key_ind=0; slot_key_ind<slot_keys.length; slot_key_ind++) {\n    slot_key = slot_keys[slot_key_ind];\n\n    if (tree.rows[row_position].groups[group_pos].slots[slot_key].render) {\n      delete_group = false;\n    }\n  }\n\n  if (delete_group) {\n    // console.log(\"DELETING GROUP\", row_position, group_pos)\n    delete tree.rows[row_position].groups[group_pos]\n  }\n\n  return tree;\n}\n\n\nconst pruneRow = (tree, row_position) => {\n  // console.log(\"Pruning Row From\", row_position)\n\n  var delete_row, delete_group;\n  var group_keys, group_key_ind, group_key;\n  var slot_keys, slot_key_ind, slot_key;\n  // Iterate over groups in row\n    // Iterate over slots in group\n      // If slot has render, delete row is false\n\n  delete_row = true;\n  group_keys = Object.keys(tree.rows[row_position].groups)\n  for (group_key_ind=0; group_key_ind<group_keys.length; group_key_ind++) {\n    group_key = group_keys[group_key_ind];\n    slot_keys = Object.keys(tree.rows[row_position].groups[group_key].slots)\n\n    delete_group = true;\n    for (slot_key_ind=0; slot_key_ind<slot_keys.length; slot_key_ind++) {\n      slot_key = slot_keys[slot_key_ind];\n\n      if (tree.rows[row_position].groups[group_key].slots[slot_key].render) {\n        delete_row = false;\n        delete_group = false;\n      }\n    }\n\n  }\n\n  if (delete_row) {\n    // console.log(\"DELETING ROW\", row_position)\n    delete tree.rows[row_position]\n  }\n\n  return tree;\n\n}\n\nconst TreePosReducer = (state, action) => {\n\n  switch (action.type) {\n    case ('init'): {\n      return JSON.parse(JSON.stringify(state));\n    }\n\n    case ('delete_node'): {\n\n      // console.log('delete')\n\n      // Make deep copy of old state\n      var new_state = {...state};\n\n      const sender_row = action.sender_pos.row;\n      const sender_group = action.sender_pos.group;\n      const sender_slot = action.sender_pos.slot;\n\n      // Purity Check (see if node still exists)\n      // Does row exists\n      if (state.rows[sender_row] === undefined) {\n        return new_state;\n      }\n      // Does group exist\n      if (state.rows[sender_row].groups[sender_group] === undefined) {\n        return new_state;\n      }\n      \n\n      // Delete All Children\n      // console.log(\"Before\", JSON.parse(JSON.stringify(new_state)))\n      new_state = deleteNode(new_state, sender_row, sender_group, sender_slot);\n\n      // Prune Tree\n      // var maximum_row = Math.max(...Object.keys(new_state.rows).map(i => parseInt(i, 10)))\n      // pruneTree(new_state, maximum_row, sender_row)\n\n      const parent_row_keys = Object.keys(new_state.rows)\n\n      let group_key;\n      let parent_group_keys, parent_slot_keys;\n      let parent_row_key, parent_group_key, parent_slot_key;\n      let tmp_parent_row, tmp_parent_group, tmp_parent_slot;\n\n      // Iterate over all rows to get a parent row\n      for (var i=0; i<parent_row_keys.length - 1; i++) {\n        parent_row_key = parseInt(parent_row_keys[i], 10);\n        tmp_parent_row = new_state.rows[parent_row_key];\n        parent_group_keys = Object.keys(tmp_parent_row.groups).sort()\n\n\n        // Iterate over Parent Group Keys\n        for (var j=0; j<parent_group_keys.length; j++) {\n          parent_group_key = parent_group_keys[j];\n          tmp_parent_group = new_state.rows[parent_row_key].groups[parent_group_key];\n          parent_slot_keys = Object.keys(tmp_parent_group.slots).sort()\n\n          // Iterate over slot keys in the parent group\n          for (var k=0; k<parent_slot_keys.length; k++) {\n            parent_slot_key = parent_slot_keys[k];\n            tmp_parent_slot = new_state.rows[parent_row_key].groups[parent_group_key].slots[parent_slot_key];\n            \n            // Calculate Group Key ROW|GROUP|SLOT\n            group_key = `${parent_group_key}${parent_slot_key}`;\n            // // console.log(parent_row_key, parent_group_key, parent_slot_key)\n            // // console.log(group_key)\n            // // console.log(JSON.parse(JSON.stringify(new_state)))\n\n            // Check if this key is in the child row's groups\n            // // We do not want to create a new group if we do not have to\n            if (!(new_state.rows[parent_row_key + 1].groups[group_key] === undefined)) {\n              continue\n            }\n\n            // Add a new group with one slot\n            new_state.rows[parent_row_key + 1].groups[group_key] = {\n              disp: {\n                x: 0,\n                y: 0,\n                width: SLOT_WIDTH,\n                height: SLOT_HEIGHT\n              },\n              sender_group: parent_group_key,\n              sender_slot: parent_slot_key,\n              slots: {\n                0: {\n                  disp: {\n                    x: 0,\n                    y: 0,\n                    width: SLOT_WIDTH,\n                    height: SLOT_HEIGHT\n                  },\n                  active_connections: [false, false, false, false],\n                  render: false\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Propogate Widths back up Tree\n      // console.log(\"After\", JSON.parse(JSON.stringify(new_state)))\n      var maximum_row = Math.max(...Object.keys(new_state.rows).map(i => parseInt(i, 10)))\n      new_state = propogateWidth(\n        {...new_state}, \n        maximum_row, \n      );\n\n      return new_state;\n\n    }\n    \n    case ('add_child'): {\n\n      // Make deep copy of old state\n      var new_state = {...state};\n\n      // Grab Row and Group from Sender\n      const parent_row_pos = action.sender_pos.row;\n      const parent_group_pos = action.sender_pos.group;\n      const parent_slot_pos = action.sender_pos.slot;\n\n      // Find Row, Group and Slot of Parent in State\n      const parent_row = new_state.rows[parent_row_pos];\n      const parent_group = parent_row.groups[parent_group_pos];\n      const parent_slot = parent_group.slots[parent_slot_pos];\n      \n      // Get history\n      const parent_group_path = parent_slot.group_path;\n      const parent_slot_path = parent_slot.slot_path;\n\n      // Calculate Child Keys\n      const child_row_pos = parent_row_pos + 1;\n      const child_group_pos = `${parent_group_pos}${parent_slot_pos}`;\n      const child_slot_pos = action.sender_pos.connection;\n\n      //////////////////////////////////////////////////////\n      // Are we adding a new row?\n      //////////////////////////////////////////////////////\n      if (new_state.rows[parent_row_pos + 1] === undefined) {\n        new_state.rows[parent_row_pos + 1] = {\n          disp: {\n            x: 0,\n            y: ROW_INIT + (parent_row_pos + 1)*ROW_DIFF,\n            width: SLOT_WIDTH,\n            height: SLOT_HEIGHT\n          },\n          groups: {}\n        }\n        \n      }\n\n      //////////////////////////////////////////////////////\n      // Are we adding a new group?\n      // 1) for each group in parent row\n        // 2 for each slot in the group\n          // each slot should have a group with a slot\n            // if the group id already exists, skip\n            // else, make new group with one slot\n      //////////////////////////////////////////////////////\n      const parent_row_keys = Object.keys(new_state.rows)\n\n      let group_key;\n      let parent_group_keys, parent_slot_keys;\n      let parent_row_key, parent_group_key, parent_slot_key;\n      let tmp_parent_row, tmp_parent_group, tmp_parent_slot;\n\n      // Iterate over all rows to get a parent row\n      for (var i=0; i<parent_row_keys.length - 1; i++) {\n        parent_row_key = parseInt(parent_row_keys[i], 10);\n        tmp_parent_row = new_state.rows[parent_row_key];\n        parent_group_keys = Object.keys(tmp_parent_row.groups).sort()\n\n\n        // Iterate over Parent Group Keys\n        for (var j=0; j<parent_group_keys.length; j++) {\n          parent_group_key = parent_group_keys[j];\n          tmp_parent_group = new_state.rows[parent_row_key].groups[parent_group_key];\n          parent_slot_keys = Object.keys(tmp_parent_group.slots).sort()\n\n          // Iterate over slot keys in the parent group\n          for (var k=0; k<parent_slot_keys.length; k++) {\n            parent_slot_key = parent_slot_keys[k];\n            tmp_parent_slot = new_state.rows[parent_row_key].groups[parent_group_key].slots[parent_slot_key];\n            \n            // Calculate Group Key ROW|GROUP|SLOT\n            group_key = `${parent_group_key}${parent_slot_key}`;\n            // // console.log(parent_row_key, parent_group_key, parent_slot_key)\n            // // console.log(group_key)\n            // // console.log(JSON.parse(JSON.stringify(new_state)))\n\n            // Check if this key is in the child row's groups\n            // // We do not want to create a new group if we do not have to\n            if (!(new_state.rows[parent_row_key + 1].groups[group_key] === undefined)) {\n              continue\n            }\n\n            // Add a new group with one slot\n            new_state.rows[parent_row_key + 1].groups[group_key] = {\n              disp: {\n                x: 0,\n                y: 0,\n                width: SLOT_WIDTH,\n                height: SLOT_HEIGHT\n              },\n              sender_group: parent_group_key,\n              sender_slot: parent_slot_key,\n              slots: {\n                0: {\n                  disp: {\n                    x: 0,\n                    y: 0,\n                    width: SLOT_WIDTH,\n                    height: SLOT_HEIGHT\n                  },\n                  active_connections: [false, false, false, false],\n                  render: false\n                }\n              }\n            }\n          }\n        }\n      }\n\n\n      //////////////////////////////////////////////////////\n      // Calculate Child Position\n      //////////////////////////////////////////////////////\n      const child_row = new_state.rows[child_row_pos]\n      const child_group = child_row.groups[child_group_pos]\n\n      // Prepare arguments for propogation\n      const slot_position = {\n        row: child_row_pos, \n        group: child_group_pos, \n        slot: child_slot_pos\n      }\n\n      const slot = {\n        disp: {\n          x: 0,\n          y: 0,\n          height: SLOT_HEIGHT,\n          width: SLOT_WIDTH\n        },\n        active_connections: [],\n        render: true,\n      }\n\n\n      //////////////////////////////////////////////////////\n      // Add Child Node to State\n      //////////////////////////////////////////////////////\n      new_state.rows[child_row_pos].groups[child_group_pos].slots[child_slot_pos] = slot\n      new_state.rows[parent_row_pos].groups[parent_group_pos].slots[parent_slot_pos].active_connections.push(child_slot_pos)\n      \n      //////////////////////////////////////////////////////\n      // Propogate changes after adding new slot\n      //////////////////////////////////////////////////////\n      new_state = propogateWidth(\n        {...new_state}, \n        parent_row_keys.length - 1, \n      );\n      \n      return new_state\n\n    }\n    default: { return state };\n  }\n\n}\n\nconst TreePosStoreProvider = (params) => {\n\n  const init_card_pos = {\n    rows: {\n      0: {\n        disp: {\n          x: 0,\n          y: 0,\n          height: SLOT_HEIGHT,\n          width: SLOT_WIDTH\n        },\n        groups: {\n          0: {\n            disp: {\n              x: 0,\n              y: 0,\n              height: SLOT_HEIGHT,\n              width: SLOT_WIDTH\n            },\n            slots: {\n              0: {\n                disp: {\n                  x: 0,\n                  y: 0,\n                  height: SLOT_HEIGHT,\n                  width: SLOT_WIDTH\n                },\n                active_connections: [],\n                render: true,\n              }\n            }\n          }\n        }\n      },\n    }\n  }\n\n  const [treePosStoreState, treePosStoreDispatch] = React.useReducer((state, action) => TreePosReducer(state, action), init_card_pos);\n\n  return (\n    <TreePosStoreStateContext.Provider value={ treePosStoreState }>\n      <TreePosStoreDispatchContext.Provider value ={ treePosStoreDispatch }>\n        {params.children}\n      </TreePosStoreDispatchContext.Provider>\n    </TreePosStoreStateContext.Provider>\n  )\n}\n\n\n\n\nconst useTreePosStoreState = () => {\n  const context = React.useContext(TreePosStoreStateContext);\n  if (context === undefined) {\n    alert(\"Please place useSVGCardStoreState in TreePosStoreStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useTreePosStoreDispatch = () => {\n  const context = React.useContext(TreePosStoreDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useSVGCardStoreState in TreePosStoreDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\n\nexport { TreePosStoreProvider, useTreePosStoreState, useTreePosStoreDispatch }\n\n","/////////////////////////////////////////////////\n// Layer Tree\n/////////////////////////////////////////////////\nimport React from 'react';\n\n// Import Custom Components\nimport LayerCard from './LayerCard';\n\n/////////////////////////////////////////////////\n// Set Up Contexts\n/////////////////////////////////////////////////\nimport { useTreePosStoreState } from '../AppStores/TreePosStore';\nimport { useLayerInfoStoreState } from '../AppStores/LayerInfoStore';\n\n///////////////////////////////////////////////////////////\n// LayerTree\n///////////////////////////////////////////////////////////\nexport default function LayerTree(params) {\n\n  ////////////////////////////////////////////////\n  // Subscribe to Tree Contexts\n  ////////////////////////////////////////////////\n  const cardPosState = useTreePosStoreState();\n  const layerInfoStoreState = useLayerInfoStoreState();\n\n  // Get Component Methods\n  const addChild = params.addChild;\n  const editLayer = params.editLayer;\n  const editModel = params.editModel;\n  const chooseDataset = params.chooseDataset;\n\n\n  // Iterate over the cardPosState\n  let style;\n  let row_key, group_key, slot_key;\n  let group_keys, slot_keys;\n  let row, group, slot, disp;\n  let row_svg, group_svg, slot_svg;\n  let group_count, slot_count;\n\n  // layer_info\n  let layer_info;\n\n  // bezier curve variables\n  var start_point, end_point;\n  var bezier_points = [];\n  var next_group_subkey;\n  var tmp_slot_keys, tmp_slot;\n  var tmp_group;\n\n  var canvas_elements = []\n\n  // Iterate over all rows\n  var row_svgs = []\n  const pos_tree = {...cardPosState}\n  const row_keys = Object.keys(pos_tree.rows);\n  const row_count = row_keys.length;\n  for (var i=0; i<row_count; i++) {\n\n    // Iterate over all groups, add group_svg to group_svgs\n    var group_svgs = []\n    row_key = parseInt(row_keys[i], 10)\n    row = pos_tree.rows[row_key]\n    group_keys = Object.keys(row.groups)\n    group_count = group_keys.length;\n    for (var j=0; j<group_count; j++) {\n\n      // Iterate over all slots, add slot_svg to slot_svgs\n      var slot_svgs = []\n      group_key = group_keys[j]\n      group = row.groups[group_key]\n\n      slot_keys = Object.keys(group.slots)\n      slot_count = slot_keys.length;\n      for (var k=0; k<slot_count; k++) {\n\n        // Render slot_svg, add to slot_svgs\n        slot_key = slot_keys[k]\n        slot = group.slots[slot_key];\n        disp = slot.disp;\n\n        // Render or placeholder\n        style = {\n          position: 'absolute',\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          top: disp.y,\n          left: disp.x,\n          height: disp.height,\n          width: disp.width,\n          textAlign: 'center',\n        }\n\n        if (slot.render) {\n\n          // Add Generic Layer Card\n          slot_svg = (\n            <div style={style} key={`${row_key}${group_key}${slot_key}`}>\n              <LayerCard\n                layerID={`${row_key}${group_key}${slot_key}`}\n                addChild={addChild}\n                editLayer={editLayer}\n                editModel={editModel}\n                chooseDataset={chooseDataset}\n                sender_pos={{row: row_key, group: group_key, slot: slot_key}}\n              />\n            </div>\n          );\n\n          slot_svgs.push(slot_svg)\n          \n          // Check if next row exists\n          if (pos_tree.rows[row_key + 1] !== undefined) {\n\n            if (pos_tree.rows[row_key + 1].groups[`${group_key}${slot_key}`] !== undefined) {\n            \n              // Instantiate the canvas\n              var canv_params = {\n                start_y: pos_tree.rows[row_key].disp.y + 200,\n                end_y: pos_tree.rows[row_key + 1].disp.y,\n                start_x: group.disp.x + slot.disp.x,\n                end_x: group.disp.x + slot.disp.x + slot.disp.width\n              }\n\n              // Calculate points for Bezier Curves in this canvas\n              var bezier_points = [];\n              start_point = [(canv_params.end_x - canv_params.start_x) / 2, 0];\n\n              // Calculate entities for next row, group and slots\n              tmp_group = pos_tree.rows[row_key + 1].groups[`${group_key}${slot_key}`];\n              if (tmp_group === undefined) {\n                console.log(row_key, group_key, slot_key)\n              }\n              tmp_slot_keys = Object.keys(tmp_group.slots);\n\n              // Iterate over slots, find if renderable, if so, add end_pos\n              for (var q=0; q<tmp_slot_keys.length; q++) {\n                tmp_slot = tmp_group.slots[tmp_slot_keys[q]];\n                if (tmp_slot.render) {\n                  end_point = [\n                      tmp_slot.disp.x + tmp_slot.disp.width / 2,\n                      canv_params.end_y - canv_params.start_y\n                    ]; \n\n                  // Draw Bezier Curve\n                  bezier_points.push(\n                    <path stroke=\"black\" strokeWidth={4} fill=\"transparent\" d={\n                      `\n                      M ${start_point[0]} ${start_point[1]}\n                      C ${start_point[0]} ${start_point[1] + 50}, ${end_point[0]} ${end_point[1] - 50},\n                      ${end_point[0]} ${end_point[1]}\n                      `\n                    }/>)\n                }\n              }\n\n              canvas_elements.push(\n                <div\n                  style={{\n                    position: \"absolute\",\n                    left: canv_params.start_x,\n                    top: canv_params.start_y,\n                    width: canv_params.end_x - canv_params.start_x,\n                    height: canv_params.end_y - canv_params.start_y,\n                  }}>\n                  <svg \n                    height={canv_params.end_y - canv_params.start_y}\n                    width={canv_params.end_x - canv_params.start_x}>\n                    {bezier_points}\n                  </svg>\n                </div>\n              )\n\n            }\n          }\n        }\n      }\n      // Render group_svg, add to group_svgs\n      disp = group.disp;\n      style = {\n          position: 'absolute',\n          top: disp.y,\n          left: disp.x,\n          height: disp.height,\n          width: disp.width,\n          // backgroundColor: \"#00FF00\",\n          // border: '2px solid black'\n        }\n      group_svg = (\n        <div style={style} key={`${row_key}${group_key}`}>\n          {slot_svgs}\n        </div>\n        )\n      group_svgs.push(group_svg)\n\n    }\n\n    // Render row_svg, add to row_svgs\n    disp = row.disp;\n    style = {\n          zIndex: 100,\n          position: 'absolute',\n          top: disp.y,\n          left: disp.x,\n          height: disp.height,\n          width: disp.width,\n          // backgroundColor: \"#0000FF\",\n          // border: '5px dashed black'\n        }\n    row_svg = (\n      <div style={style} key={`${row_key}`}>\n          {group_svgs}\n      </div>\n      )\n    row_svgs.push(row_svg)\n  }\n\n  const TreeSVG = (\n    <div>\n      {row_svgs}\n    </div>\n  )\n\n  return (\n    <div style={{\n      position: \"absolute\", \n      width: \"98%\", \n      height:\"98%\"\n    }}>\n      {TreeSVG}\n      {canvas_elements}\n    </div>\n    )\n}","import React from 'react';\n\nconst EditModelDialogStateContext = React.createContext(null);\nconst EditModelDialogDispatchContext = React.createContext(null);\n\nconst EditModelDialogContextProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [editModelDialog, setEditModelDialog] = React.useState({open: false, model_key: null});\n\n\treturn (\n\t\t<EditModelDialogStateContext.Provider value={ editModelDialog }>\n\t\t\t<EditModelDialogDispatchContext.Provider value={ setEditModelDialog }>\n\t\t\t\t{children}\n\t\t\t</EditModelDialogDispatchContext.Provider>\n\t\t</EditModelDialogStateContext.Provider>\n\t)\n}\n\nconst useEditModelDialogState = () => {\n  const context = React.useContext(EditModelDialogStateContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerState in EditModelDialogStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useEditModelDialogDispatch = () => {\n  const context = React.useContext(EditModelDialogDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerDispatch in EditModelDialogDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { EditModelDialogContextProvider, useEditModelDialogState, useEditModelDialogDispatch };","/////////////////////////////////////////////////\n// Header\n/////////////////////////////////////////////////\nimport React from 'react';\nimport clsx from 'clsx';\n\n// Import Styling Tools\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Import Material-Kit Components\nimport {\n  Drawer, \n  AppBar,\n  Toolbar, \n  CssBaseline,\n  List, \n  Typography, \n  Divider, \n  IconButton, \n  ListItem, \n  ListItemIcon, \n  ListItemText } from '@material-ui/core';\n\n// Import Icons\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\n// Import Contexts\nimport { useEditModelDialogDispatch } from '../AppStores/EditModelDialogContext';\nimport { useModelStoreState } from '../AppStores/ModelStore';\n\n/////////////////////////////////////////////////\n// Declare Constants\n/////////////////////////////////////////////////\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    backgroundColor: \"#ff911c\"\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginRight: drawerWidth,\n  },\n  title: {\n    flexGrow: 1,\n    backgroundColor: \"#ff911c\"\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-start',\n  },\n}));\n\n/////////////////////////////////////////////////\n// Header\n/////////////////////////////////////////////////\nexport default function Header() {\n  const classes = useStyles();\n\n  // Subscribe to Contexts\n  const editModelDialogDispatch = useEditModelDialogDispatch();\n  const modelStoreState = useModelStoreState();\n\n  // Set Up Component Hooks\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n\n  // Get Model Store Data\n  \n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap className={classes.title}>\n            TensorShow\n          </Typography>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"end\"\n            onClick={handleDrawerOpen}\n            className={clsx(open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n             <ChevronRightIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem>\n            <ListItemText primary={\"Saved Models\"}/>\n          </ListItem>\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          <ListItem>\n            <ListItemText primary={\"Training Models\"}/>\n          </ListItem>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <List>\n          <ListItem>\n            <ListItemText primary={\"Trained Models\"}/>\n          </ListItem>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n    </div>\n  );\n}\n","import React from 'react';\n\nconst EditLayerDialogStateContext = React.createContext(null);\nconst EditLayerDialogDispatchContext = React.createContext(null);\n\nconst EditLayerDialogContextProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [openDialog, setOpenDialog] = React.useState({open: false});\n\n\treturn (\n\t\t<EditLayerDialogStateContext.Provider value={ openDialog }>\n\t\t\t<EditLayerDialogDispatchContext.Provider value={ setOpenDialog }>\n\t\t\t\t{children}\n\t\t\t</EditLayerDialogDispatchContext.Provider>\n\t\t</EditLayerDialogStateContext.Provider>\n\t)\n}\n\nconst useEditLayerDialogState = () => {\n  const context = React.useContext(EditLayerDialogStateContext);\n  if (context === undefined) {\n    alert(\"Please place useDialogState in EditLayerDialogStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useEditLayerDialogDispatch = () => {\n  const context = React.useContext(EditLayerDialogDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useDialogDispatch in EditLayerDialogDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { EditLayerDialogContextProvider, useEditLayerDialogState, useEditLayerDialogDispatch };","import React from 'react';\n\nconst CurrentLayerStateContext = React.createContext(null);\nconst CurrentLayerDispatchContext = React.createContext(null);\n\nconst CurrentLayerContextProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [currentLayer, setCurrentLayer] = React.useState({\n                                                sender_pos: {\n                                                    row: 0,\n                                                    group: 0,\n                                                    slot: 0\n                                                }});\n\n\treturn (\n\t\t<CurrentLayerStateContext.Provider value={ currentLayer }>\n\t\t\t<CurrentLayerDispatchContext.Provider value={ setCurrentLayer }>\n\t\t\t\t{children}\n\t\t\t</CurrentLayerDispatchContext.Provider>\n\t\t</CurrentLayerStateContext.Provider>\n\t)\n}\n\nconst useCurrentLayerState = () => {\n  const context = React.useContext(CurrentLayerStateContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerState in CurrentLayerStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useCurrentLayerDispatch = () => {\n  const context = React.useContext(CurrentLayerDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerDispatch in CurrentLayerDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { CurrentLayerContextProvider, useCurrentLayerState, useCurrentLayerDispatch };","/////////////////////////////////////////////////\n// Edit Layer\n/////////////////////////////////////////////////\nimport React from 'react';\n\n// Import Styling Tools\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Import Components\nimport {\n\tDialog, \n\tDialogTitle, \n\tDialogContent, \n\tDialogContentText, \n\tDialogActions } from '@material-ui/core';\n\nimport {\n\tDivider,\n\tTypography,\n\tTextField,\n\tInputLabel,\n\tFormControl,\n\tMenuItem,\n\tSelect,\n\tFormControlLabel,\n\tFormHelperText,\n\tCheckbox,\n\tButton } from '@material-ui/core';\n\n\n/////////////////////////////////////////////////\n// Set Up Contexts\n/////////////////////////////////////////////////\nimport { useTreePosStoreState, useTreePosStoreDispatch } from '../../AppStores/TreePosStore';\nimport { useEditLayerDialogState, useEditLayerDialogDispatch } from '../../AppStores/EditLayerDialogContext';\nimport { useCurrentLayerState, useCurrentLayerDispatch } from '../../AppStores/CurrentLayerContext';\nimport { useLayerInfoStoreState, useLayerInfoStoreDispatch } from '../../AppStores/LayerInfoStore';\nimport { useModelStoreDispatch } from '../../AppStores/ModelStore';\n\n\n/////////////////////////////////////////////////\n// Declare Constants\n/////////////////////////////////////////////////\nconst useStyles = makeStyles((theme) => ({\n\tlayerNameTextField: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120\n\t},\n\tlayerTypeSelectControl: {\n\t\tdisplay: \"block\",\n    margin: theme.spacing(1),\n    minWidth: 150,\n  },\n  paramTextFieldGroup: {\n  \tdisplay: \"flex\"\n  },\n  paramTextField: {\n  \tmargin: theme.spacing(1),\n  \tmaxWidth: 150\n  }\n}))\n\nconst layer_type_map = {\n\t\"conv_layer\": \"Convolutional\",\n\t\"pool_layer\": \"Pooling\",\n\t\"full_layer\": \"Fully Connected\"\n}\n\n\n////////////////////////////////////////////////\n// Helper Functions\n////////////////////////////////////////////////\nconst getNextLayerOptions = (parent_layer_type, dialog_type) => {\n\tswitch (parent_layer_type) {\n\t\tcase \"input_layer\": {\n\t\t\treturn [\"conv_layer\", \"pool_layer\", \"full_layer\"]\n\t\t}\n\t\tcase \"conv_layer\": {\n\t\t\tif (dialog_type === 'edit') {\n\t\t\t\treturn [\"conv_layer\", \"pool_layer\"]\n\t\t\t} else {\n\t\t\t\treturn [\"conv_layer\", \"pool_layer\", \"full_layer\"]\n\t\t\t}\n\t\t}\n\t\tcase \"pool_layer\": {\n\t\t\tif (dialog_type === 'edit') {\n\t\t\t\treturn [\"conv_layer\", \"pool_layer\"]\n\t\t\t} else {\n\t\t\t\treturn [\"conv_layer\", \"pool_layer\", \"full_layer\"]\n\t\t\t}\n\t\t}\n\t\tcase \"full_layer\": {\n\t\t\treturn [\"full_layer\"]\n\t\t}\n\t}\n}\n\nfunction onlyUnique(value, index, self) { \n    return self.indexOf(value) === index;\n}\n\n////////////////////////////////////////////////\n// Edit Layer\n////////////////////////////////////////////////\nexport default function EditLayer(params) {\n\tconst classes = useStyles();\n\n\t////////////////////////////////////////////////\n\t// Subscribe to Contexts for this Dialog\n\t////////////////////////////////////////////////\n\tconst {open, dialog_type} = useEditLayerDialogState();\n\tconst dialogDispatch = useEditLayerDialogDispatch();\n\n\tconst currentLayerState = useCurrentLayerState();\n\tconst currentLayerDispatch = useCurrentLayerDispatch();\n\n\tconst treePosState = useTreePosStoreState();\n\tconst treePosDispatch = useTreePosStoreDispatch();\n\n\tconst layerInfoStoreState = useLayerInfoStoreState();\n\tconst layerInfoStoreDispatch = useLayerInfoStoreDispatch();\n\n\tconst modelStoreDispatch = useModelStoreDispatch();\n\n\t////////////////////////////////////////////////\n\t// Calculate Sender Information\n\t////////////////////////////////////////////////\n\tconst sender_pos = currentLayerState.sender_pos;\n\tconst sender_pos_key = `${sender_pos.row}${sender_pos.group}${sender_pos.slot}`\n\tconst sender_info = layerInfoStoreState[sender_pos_key]\n\n\t// Get information for Dialog\n\tconst sender_layer_name = sender_info.layer_name\n\tconst sender_layer_type = sender_info.layer_type\n\tconst sender_layer_params = sender_info.layer_params;\n\tconst parent_pos = sender_info.parent_pos;\n\n\tvar disable_last_layer = false;\n\tif (dialog_type === 'edit') {\n\t\tif (sender_info.inModel) {\n\t\t\tdisable_last_layer = true\n\t\t}\n\t}\n\n\t////////////////////////////////////////////////\n\t// Establish Dialog Hooks for storing Layer Info\n\t////////////////////////////////////////////////\n\tconst next_layer_options = getNextLayerOptions(sender_layer_type, dialog_type)\n\tconst [nextLayerName, setNextLayerName] = React.useState(\"New Layer\")\n\tconst [nextLayerType, setNextLayerType] = React.useState(next_layer_options[0])\n\tconst [nextLayerParams, setNextLayerParams] = React.useState({})\n\tconst [modelName, setModelName] = React.useState(\"New Model\")\n\n\t///////////////////////////////////////////////////////\n\t// Edit Layer Functionality Methods\n\t///////////////////////////////////////////////////////\n\tconst handleAdd = (event) => {\n\t\tevent.preventDefault();\n\n\t\t// Calculate sender connection position\n\t\tconst tree = treePosState;\n\t\tconst parent = tree.rows[sender_pos.row].groups[sender_pos.group].slots[sender_pos.slot];\n\n\t\tvar active_connections = parent.active_connections;\n\t\tactive_connections = active_connections.filter( onlyUnique ); \n\n\t\tconst connection_pos = active_connections.length;\n\t\tconst new_sender_pos = {...sender_pos, connection: connection_pos}\n\n\t\t// Add Child Position to Position Tree\n\t\ttreePosDispatch({\n\t\t\ttype: 'add_child', \n\t\t\tsender_pos: new_sender_pos, \n\t\t});\n\n\t\t// ADD Layer Information to LayerInfoStore\n\t\tconst new_layer_pos_key = `${sender_pos.row + 1}${sender_pos.group}${sender_pos.slot}${connection_pos}`\n\t\t\n\t\tlet next_layer_params;\n\t\tswitch (nextLayerType) {\n\t\t\tcase \"conv_layer\": {\n\t\t\t\tnext_layer_params = pullConvParams();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"pool_layer\": {\n\t\t\t\tnext_layer_params = pullPoolParams();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"full_layer\": {\n\t\t\t\tnext_layer_params = pullFullParams();\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tlayerInfoStoreDispatch({\n\t\t\ttype: 'add', \n\t\t\tlayerID: new_layer_pos_key, \n\t\t\tlayer_info: {\n\t\t\t\tlayer_name: nextLayerName,\n\t\t\t\tlayer_type: nextLayerType,\n\t\t\t\tposition: {\n\t\t\t\t\trow: sender_pos.row + 1,\n\t\t\t\t\tgroup: `${sender_pos.group}${sender_pos.slot}`,\n\t\t\t\t\tslot: connection_pos\n\t\t\t\t},\n\t\t\t\tparent_pos: sender_pos,\n\t\t\t\tlayer_params: next_layer_params\n\t\t\t}\n\t\t})\n\n\t\t// Check if Last Layer is added\n\t\tvar model_card_position_key;\n\t\tif (lastLayer) {\n\n\t\t\t// Add Position for Model Card\n\t\t\ttreePosDispatch({\n\t\t\t\ttype: 'add_child', \n\t\t\t\tsender_pos: {\n\t\t\t\t\trow: sender_pos.row + 1,\n\t\t\t\t\tgroup: `${sender_pos.group}${sender_pos.slot}`,\n\t\t\t\t\tslot: connection_pos,\n\t\t\t\t\tconnection: 0\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Calculate position key of model card\n\t\t\tmodel_card_position_key = `${sender_pos.row + 2}${sender_pos.group}${sender_pos.slot}${connection_pos}0`\n\t\t\tlayerInfoStoreDispatch({\n\t\t\ttype: 'add', \n\t\t\tlayerID: model_card_position_key, \n\t\t\tlayer_info: {\n\t\t\t\tlayer_name: modelName,\n\t\t\t\tlayer_type: \"model\",\n\t\t\t\tlayerID: model_card_position_key\n\t\t\t}\n\t\t})\n\n\n\t\t\t// Add Model Card in Layer Info Store\n\n\t\t\t///////////////////////////////////////////\n\t\t\t// Add Model to Model Context\n\t\t\t///////////////////////////////////////////\n\t\t\tparams.addModel({\n\t\t\t\tparent_pos: {\n\t\t\t\t\trow: sender_pos.row + 1,\n\t\t\t\t\tgroup: `${sender_pos.group}${sender_pos.slot}`,\n\t\t\t\t\tslot: connection_pos\n\t\t\t\t},\n\t\t\t\tmodel_key: model_card_position_key,\n\t\t\t\tmodel_name: modelName\n\t\t\t})\n\n\t\t\t// Calculate layers\n\n\t\t}\n\t\t\n\t\t// Close Dialog\n\t\tdialogDispatch({open: false});\n\n\t}\n\n\tconst handleSave = (event) => {\n\t\tevent.preventDefault();\n\n\t\t// UPDATE Layer Information to LayerInfoStore\n\t\tlet next_layer_params;\n\t\tswitch (nextLayerType) {\n\t\t\tcase \"conv_layer\": {\n\t\t\t\tnext_layer_params = pullConvParams();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"pool_layer\": {\n\t\t\t\tnext_layer_params = pullPoolParams();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"full_layer\": {\n\t\t\t\tnext_layer_params = pullFullParams();\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// Update Layer Info Store\n\t\tlayerInfoStoreDispatch({\n\t\t\ttype: 'update', \n\t\t\tlayerID: sender_pos_key, \n\t\t\tlayer_info: {\n\t\t\t\tlayer_name: nextLayerName,\n\t\t\t\tlayer_type: nextLayerType,\n\t\t\t\tlayer_params: next_layer_params\n\t\t\t}\n\t\t})\n\n\t\t// Update Model if in Model\n\t\tif (sender_info.inModel) {\n\t\t\tparams.editModelLayer({\n\t\t\t\tmodel_key: sender_info.inModel,\n\t\t\t\tlayer_key: sender_pos_key\n\t\t\t})\n\t\t}\n\t\t\n\n\t\t// HACK (forces UI Update)\n\t\ttreePosDispatch({type: 'init'});\n\n\t\t// Update Current Layer to be the current layer\n\t\tcurrentLayerDispatch({sender_pos: sender_pos});\n\n\t\t// Close Dialog\n\t\tdialogDispatch({open: false});\n\t}\n\n\tconst handleDelete = (event) => {\n\t\tevent.preventDefault();\n\n\t\t// Remove node from parent connections\n\t\tconst tree = treePosState;\n\t\tconst parent_pos = sender_info.parent_pos;\n\t\tconst parent_node = tree.rows[parent_pos.row].groups[parent_pos.group].slots[parent_pos.slot]\n\t\tvar active_connections = parent_node.active_connections\n\t\tactive_connections = active_connections.filter( onlyUnique )\n\t\tactive_connections.pop()\n\t\tparent_node.active_connections = active_connections;\n\n\t\t// Delete Sender Node Position from Position Tree\n\t\ttreePosDispatch({\n\t\t\ttype: 'delete_node', \n\t\t\tsender_pos: sender_pos\n\t\t});\n\n\t\t// Delete Sender Node Information from Info Store\n\t\tlayerInfoStoreDispatch({\n\t\t\ttype: 'delete',\n\t\t\tlayerID: sender_pos_key\n\t\t})\n\n\t\t// Check if the layer is in a model\n\t\tif (sender_info.inModel) {\n\t\t\tmodelStoreDispatch({\n\t\t\t\ttype: 'delete_model',\n\t\t\t\tmodelID: sender_info.inModel\n\t\t\t})\n\t\t}\n\n\n\t\t// Set currentLayer to parent\n\t\tcurrentLayerDispatch({sender_pos: parent_pos});\n\n\t\t// Close Dialog\n\t\tdialogDispatch({open: false});\n\t}\n\n\tconst handleCancel = (event) => {\n\t\tevent.preventDefault();\n\n\t\t// Close Dialog\n\t\tdialogDispatch({open: false});\n\t}\n\n\t///////////////////////////////////////////////////////\n\t// Handle Changes of Layer Information\n\t///////////////////////////////////////////////////////\n\tconst handleChangeNextLayerName = event => {\n\t\tsetNextLayerName(event.target.value)\n  };\n\n  const handleChangeNextLayerType = event => {\n  \tsetNextLayerType(event.target.value)\n  }\n\n\n\t///////////////////////////////////////////////////////\n\t// Window Parameters\n\t///////////////////////////////////////////////////////\n\tconst [windowWidth, setWindowWidth] = React.useState(5)\n\tconst [windowHeight, setWindowHeight] = React.useState(5)\n\tconst [windowChannels, setWindowChannels] = React.useState(16)\n\tconst windowParams = (\n\t\t<div>\n\t\t\t<Typography variant=\"h6\" align=\"left\">Window Parameters</Typography>\n\t\t\t<div className={classes.paramTextFieldGroup}>\n\t\t\t\t<TextField\n\t\t\t\t\tclassName={classes.paramTextField}\n\t        type=\"number\"\n\t        InputLabelProps={{\n\t          shrink: true,\n\t        }}\n\t        variant=\"outlined\"\n\t        helperText=\"Window Width\"\n\t        value={windowWidth}\n\t        onChange={(event) => setWindowWidth(event.target.value)}\n\t      />\n       \t<TextField\n       \t\tclassName={classes.paramTextField}\n\t        type=\"number\"\n\t        InputLabelProps={{\n\t          shrink: true,\n\t        }}\n\t        variant=\"outlined\"\n\t        helperText=\"Window Height\"\n\t        value={windowHeight}\n\t        onChange={(event) => setWindowHeight(event.target.value)}\n\t      />\n      \t{nextLayerType === \"pool_layer\" ? null: <TextField\n      \t\tclassName={classes.paramTextField}\n\t        type=\"number\"\n\t        InputLabelProps={{\n\t          shrink: true,\n\t        }}\n\t        variant=\"outlined\"\n\t        helperText=\"Window Channels\"\n\t        value={windowChannels}\n\t        onChange={(event) => setWindowChannels(event.target.value)}\n\t      />}\n\t     </div>\n\n\t\t</div>\n\t);\n\n\t///////////////////////////////////////////////////////\n\t// Stride Parameters\n\t///////////////////////////////////////////////////////\n\tconst [strideX, setStrideX] = React.useState(1)\n\tconst [strideY, setStrideY] = React.useState(1)\n\tconst strideParams = (\n\t\t<div>\n\t\t\t<Typography variant=\"h6\" align=\"left\">Stride Parameters</Typography>\n\t\t\t<div className={classes.paramTextFieldGroup}>\n\t\t\t\t<TextField\n\t\t\t\t\tclassName={classes.paramTextField}\n\t        type=\"number\"\n\t        InputLabelProps={{\n\t          shrink: true,\n\t        }}\n\t        variant=\"outlined\"\n\t        helperText=\"X Stride\"\n\t        value={strideX}\n\t        onChange={(event) => setStrideX(event.target.value)}\n\t      />\n       \t<TextField\n       \t\tclassName={classes.paramTextField}\n\t        type=\"number\"\n\t        InputLabelProps={{\n\t          shrink: true,\n\t        }}\n\t        variant=\"outlined\"\n\t        helperText=\"Y Stride\"\n\t        value={strideY}\n\t        onChange={(event) => setStrideY(event.target.value)}\n\t      />\n\t     </div>\n\t\t</div>\n\t);\n\n\t///////////////////////////////////////////////////////\n\t// Fully Connected Parameters\n\t///////////////////////////////////////////////////////\n\tconst [outputUnits, setOutputUnits] = React.useState(16)\n\tconst [disableOutputUnits, setDisableOutputUnits] = React.useState(false);\n\tconst [lastLayer, setLastLayer] = React.useState(false)\n\tconst checkLastLayer = () => {\n\n\t\tif (layerInfoStoreState[\"000\"].layer_params.dataset_name === \"\") {\n\t\t\talert(\"Please Choose a Dataset before Finishing the Model!\");\n\t\t\treturn;\n\t\t}\n\n\t\tsetLastLayer(!lastLayer);\n\n\t\tif (lastLayer) {\n\t\t\tsetDisableOutputUnits(false)\n\t\t} else {\n\t\t\tsetOutputUnits(layerInfoStoreState[\"000\"].layer_params.labels);\n\t\t\tsetDisableOutputUnits(true);\n\t\t}\n\t}\n\tconst fullParams = (\n\t\t<div>\n\t\t\t<Typography variant=\"h6\" align=\"left\">Fully Connected Parameters</Typography>\n\t\t\t<div className={classes.paramTextFieldGroup}>\n\t\t\t\t<TextField\n\t\t\t\t\tclassName={classes.paramTextField}\n\t        type=\"number\"\n\t        InputLabelProps={{\n\t          shrink: true,\n\t        }}\n\t        variant=\"outlined\"\n\t        helperText=\"Output Units\"\n\t        value={outputUnits}\n\t        onChange={(event) => setOutputUnits(event.target.value)}\n\t        disabled={disableOutputUnits}\n\t      />\n       \t<FormControlLabel\n       \t\tclassName={classes.paramTextField}\n\t\t      control={\n\t          <Checkbox\n\t            checked={lastLayer}\n\t            onChange={() => checkLastLayer()}\n\t            color=\"secondary\"\n\t            disabled={disable_last_layer}\n\t          />\n\t        }\n        \tlabel=\"Last Layer?\"\n      \t/>\n\t    </div>\n   \t\t{lastLayer ? (\n   \t\t\t<TextField\n\t\t\t\t\tclassName={classes.layerNameTextField}\n\t        label=\"Model Name\"\n\t        defaultValue=\"Default Value\"\n\t        value={modelName}\n\t        onChange={(event) => setModelName(event.target.value)}\n\t      />): null}\n\t\t</div>\n\t);\n\n\t///////////////////////////////////////////////////////\n\t// Activation and Regularization Parameters\n\t///////////////////////////////////////////////////////\n\tconst activation_types = [\"None\", \"Relu\", \"Sigmoid\", \"Tanh\"]\n\tconst regularization_types = [\"None\", \"L1: Lasso\", \"L2: Ridge\"]\n\tconst [activationType, setActivationType] = React.useState(\"None\")\n\tconst [regularizationType, setRegularizationType] = React.useState(\"None\")\n\tconst activationParams = (\n\t\t<div>\n\t\t\t<Typography variant=\"h6\" align=\"left\">Activation & Regularization</Typography>\n\t\t\t<div className={classes.paramTextFieldGroup}>\n\t\t\t\t<FormControl className={classes.layerTypeSelectControl}>\n\t        <Select\n\t        \tstyle={{minWidth: 150}}\n\t          labelId=\"activation-type-select-label\"\n\t          variant=\"outlined\"\n\t          value={activationType}\n\t          disabled={disableOutputUnits}\n\t          onChange={(event) => setActivationType(event.target.value)}\n\t        >\n\t          {activation_types.map(i => (\n\t          \t<MenuItem value={i}>{i}</MenuItem>))}\n\t        </Select>\n\t        <FormHelperText>Activation Type</FormHelperText>\n\t      </FormControl>\n\t      <FormControl className={classes.layerTypeSelectControl}>\n\t        <Select\n\t        \tstyle={{minWidth: 150}}\n\t          labelId=\"activation-type-select-label\"\n\t          variant=\"outlined\"\n\t          disabled={disableOutputUnits}\n\t          value={regularizationType}\n\t          onChange={(event) => setRegularizationType(event.target.value)}\n\t        >\n\t          {regularization_types.map(i => (\n\t          \t<MenuItem value={i}>{i}</MenuItem>))}\n\t        </Select>\n\t        <FormHelperText>Activation Type</FormHelperText>\n\t      </FormControl>\n\t\t  </div>\n\t\t</div>\n\t);\n\n\t///////////////////////////////////////////////////////\n\t// Pooling Parameters\n\t///////////////////////////////////////////////////////\n\tconst pooling_types = [\"Maximum Pooling\", \"Average Pooling\"]\n\tconst [poolingType, setPoolingType] = React.useState(pooling_types[0])\n\tconst poolingParams = (\n\t\t<div>\n\t\t\t<Typography variant=\"h6\" align=\"left\">Pooling Parameter</Typography>\n\t\t\t<div className={classes.paramTextFieldGroup}>\n\t\t\t\t<FormControl className={classes.layerTypeSelectControl}>\n\t        <Select\n\t        \tstyle={{minWidth: 150}}\n\t          labelId=\"activation-type-select-label\"\n\t          variant=\"outlined\"\n\t          value={poolingType}\n\t          onChange={(event) => setPoolingType(event.target.value)}\n\t        >\n\t          {pooling_types.map(i => (\n\t          \t<MenuItem value={i}>{i}</MenuItem>))}\n\t        </Select>\n\t        <FormHelperText>Pooling Type</FormHelperText>\n\t      </FormControl>\n\t\t  </div>\n\t\t</div>\n\t);\n\n\t///////////////////////////////////////////////////////\n\t// Parameter Pulling Methods\n\t///////////////////////////////////////////////////////\n\tconst pullConvParams = () => ({\n\t\twindow: {\n\t\t\twidth: windowWidth,\n\t\t\theight: windowHeight,\n\t\t\tchannels: windowChannels\n\t\t},\n\t\tstride: {\n\t\t\tx: strideX,\n\t\t\ty: strideY\n\t\t},\n\t\tactivation: activationType,\n\t\tregularization: regularizationType\n\t});\n\n\tconst pullPoolParams = () => ({\n\t\twindow: {\n\t\t\twidth: windowWidth,\n\t\t\theight: windowHeight,\n\t\t\tchannels: windowChannels\n\t\t},\n\t\tstride: {\n\t\t\tx: strideX,\n\t\t\ty: strideY\n\t\t},\n\t\tpooling: poolingType\n\t});\n\n\tconst pullFullParams = () => ({\n\t\toutput: {\n\t\t\tunits: outputUnits\n\t\t},\n\t\tlast_layer: lastLayer,\n\t\tactivation: activationType,\n\t\tregularization: regularizationType\n\t});\n\n\t///////////////////////////////////////////////////////\n\t// Setup Parameter Window given the Next Layer Type\n\t///////////////////////////////////////////////////////\n\tlet parameter_window;\n\tswitch (nextLayerType) {\n\t\tcase \"conv_layer\": {\n\t\t\tparameter_window = (\n\t\t\t\t<div>\n\t\t\t\t\t{windowParams}\n\t\t\t\t\t{strideParams}\n\t\t\t\t\t{activationParams}\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t\tcase \"pool_layer\": {\n\t\t\tparameter_window = (\n\t\t\t\t<div>\n\t\t\t\t\t{windowParams}\n\t\t\t\t\t{strideParams}\n\t\t\t\t\t{poolingParams}\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t\tcase \"full_layer\": {\n\t\t\tparameter_window = (\n\t\t\t\t<div>\n\t\t\t\t\t{fullParams}\n\t\t\t\t\t{activationParams}\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////\n\t// Setup Button Group given the Dialog Type\n\t///////////////////////////////////////////////////////\n\tlet dialog_button_group;\n\tswitch (dialog_type) {\n\t\tcase \"edit\": {\n\t\t\tdialog_button_group = (\n\t\t\t\t<DialogActions>\n\t        <Button onClick={handleCancel} color=\"primary\">\n\t          Cancel\n\t        </Button>\n\t        <Button onClick={handleSave} color=\"primary\">\n\t          Save\n\t        </Button>\n\t        <Button onClick={handleDelete} color=\"primary\">\n\t        \tDelete \n\t        </Button>\n      \t</DialogActions>\n\t\t\t)\n\t\t\tbreak;\n\t\t}\n\t\tcase 'add': {\n\t\t\tdialog_button_group = (\n\t\t\t\t<DialogActions>\n\t        <Button onClick={handleCancel} color=\"primary\">\n\t          Cancel\n\t        </Button>\n\t        <Button onClick={handleAdd} color=\"primary\">\n\t          Add\n\t        </Button>\n      \t</DialogActions>\n\t\t\t)\n\t\t\tbreak;\n\t\t}\n\t}\n\n\n\t///////////////////////////////////////////////////////\n\t// Setup Default Parameters\n\t///////////////////////////////////////////////////////\n\tReact.useEffect(() => {\n\n\t\t// Always set last layer to false\n\t\tsetLastLayer(false);\n\t\tsetDisableOutputUnits(false)\n\n\t\t// In Edit Mode -> set layer name to saved layer name\n\t\tif (dialog_type === 'edit') {\n\t\t\tsetNextLayerName(sender_layer_name)\n\t\t\tsetNextLayerType(sender_layer_type)\n\n\t\t// In Add Mode -> set layer name to default value\n\t\t} else {\n\t\t\tsetNextLayerName(\"New Layer\")\n\t\t\tsetNextLayerType(next_layer_options[0])\n\t\t}\n\n\t\tif (dialog_type === 'edit') {\n\n\t\t\t// In Convolution and Pooling Layer -> Set window and stride info\n\t\t\tif ((sender_layer_type === 'conv_layer') | (sender_layer_type === 'pool_layer')) {\n\t\t\t\tsetWindowWidth(sender_layer_params.window.width);\n\t\t\t\tsetWindowHeight(sender_layer_params.window.height);\n\t\t\t\tsetWindowChannels(sender_layer_params.window.channels);\n\t\t\t\tsetStrideX(sender_layer_params.stride.x)\n\t\t\t\tsetStrideY(sender_layer_params.stride.y)\n\n\t\t\t\t// In Convolution Type -> Set Activation and Regularization\n\t\t\t\tif (sender_layer_type === 'conv_layer') {\n\t\t\t\t\tsetActivationType(sender_layer_params.activation)\n\t\t\t\t\tsetRegularizationType(sender_layer_params.regularization)\n\n\t\t\t\t// In Pooling Type -> Set Activation and Regularization\n\t\t\t\t} else {\n\t\t\t\t\tsetPoolingType(sender_layer_params.pooling)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// In Dense Type -> Set Output, Last Layer, Acrtivation and Regularization\n\t\t\telse if (sender_layer_type === 'full_layer') {\n\t\t\t\tconsole.log(sender_layer_params.last_layer)\n\t\t\t\tsetOutputUnits(sender_layer_params.output.units)\n\t\t\t\tsetLastLayer(sender_layer_params.last_layer)\n\t\t\t\tsetActivationType(sender_layer_params.activation)\n\t\t\t\tsetDisableOutputUnits(lastLayer)\n\t\t\t\tsetRegularizationType(sender_layer_params.regularization)\n\t\t\t}\n\t\t}\n\n\t// Run on Dialog open\n\t}, [open])\n\n\n\n\treturn (\n\t\t<Dialog open={open} onClose={() => dialogDispatch(false)}>\n\t\t\t<DialogTitle style={{display: 'inline', float: 'left'}}>\n\t\t\t{(dialog_type === \"edit\" ? \"Edit Layer\": \"Add Layer\")}\n\t\t\t</DialogTitle>\n\t\t\t<DialogContent>\n\t\t\t\t<Typography variant=\"h6\" align=\"left\">Layer Information</Typography>\n\n\t\t\t\t<div className={classes.paramTextFieldGroup}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tclassName={classes.layerNameTextField}\n\t          label=\"Layer Name\"\n\t          defaultValue=\"Default Value\"\n\t          value={nextLayerName}\n\t          onChange={handleChangeNextLayerName}\n\t        />\n\t        <FormControl className={classes.layerTypeSelectControl}>\n\t\t        <InputLabel shrink id=\"layer-type-select-label\">\n\t\t          Layer Type\n\t\t        </InputLabel>\n\t\t        <Select\n\t\t          labelId=\"layer-type-select-label\"\n\t\t          value={nextLayerType}\n\t\t          onChange={handleChangeNextLayerType}\n\t\t          displayEmpty\n\t\t        >\n\t\t          {next_layer_options.map(i => (\n\t\t          \t<MenuItem value={i}>{layer_type_map[i]}</MenuItem>))}\n\t\t        </Select>\n\t\t      </FormControl>\n\t\t     </div>\n\t\t     {parameter_window}\n\t\t\t</DialogContent>\n\t\t\t{dialog_button_group}\n\t\t</Dialog>\n\t)\n}\n","import React from 'react';\n\nconst ModelTrainStoreStateContext = React.createContext(null);\nconst ModelTrainStoreDispatchContext = React.createContext(null);\n\nconst ModelTrainStoreProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [modelTrainState, setModelTrainState] = React.useReducer((state, action) => {\n\n\t\tswitch (action.type) {\n\t\t\tcase ('add_model'): {\n\t\t\t\tstate[action.model_key] = {\n\t\t\t\t\tmetrics: {\n\t\t\t\t\t\taccuracy: [],\n\t\t\t\t\t\tloss: []\n\t\t\t\t\t},\n\t\t\t\t\tstatus: \"training\",\n\t\t\t\t\tprogress: 0,\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase (\"update_accuracy\"): {\n\t\t\t\tstate[action.model_key].metrics[\"accuracy\"].push(action.accuracy)\n\t\t\t}\n\t\t\tcase (\"update_loss\"): {\n\t\t\t\tstate[action.model_key].metrics[\"loss\"].push(action.loss)\n\t\t\t}\n\t\t\tcase (\"update_progress\"): {\n\t\t\t\tstate[action.model_key].progress = action.progress\n\t\t\t}\n\t\t\tcase (\"update_status\"): {\n\t\t\t\tstate[action.model_key].status = action.status\n\t\t\t}\n\t\t}\n\n\t}, {})\n\n\treturn (\n\t\t<ModelTrainStoreStateContext.Provider value={ modelTrainState }>\n\t\t\t<ModelTrainStoreDispatchContext.Provider value={ setModelTrainState }>\n\t\t\t\t{children}\n\t\t\t</ModelTrainStoreDispatchContext.Provider>\n\t\t</ModelTrainStoreStateContext.Provider>\n\t)\n}\n\nconst useModelTrainStoreState = () => {\n  const context = React.useContext(ModelTrainStoreStateContext);\n  if (context === undefined) {\n    alert(\"Please place useModelTrainStoreState in ModelTrainStoreStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useModelTrainStoreDispatch = () => {\n  const context = React.useContext(ModelTrainStoreDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useModelTrainStoreDispatch in ModelTrainStoreDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { ModelTrainStoreProvider, useModelTrainStoreState, useModelTrainStoreDispatch };","import React from 'react';\n\nconst ServeModelFileStateContext = React.createContext(null);\nconst ServeModelFileDispatchContext = React.createContext(null);\n\nconst ServeModelFileProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [modelFile, setModelFile] = React.useState(null);\n\n\treturn (\n\t\t<ServeModelFileStateContext.Provider value={ modelFile }>\n\t\t\t<ServeModelFileDispatchContext.Provider value={ setModelFile }>\n\t\t\t\t{children}\n\t\t\t</ServeModelFileDispatchContext.Provider>\n\t\t</ServeModelFileStateContext.Provider>\n\t)\n}\n\nconst useServeModelFileState = () => {\n  const context = React.useContext(ServeModelFileStateContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerState in CurrentLayerStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useServeModelFileDispatch = () => {\n  const context = React.useContext(ServeModelFileDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerDispatch in CurrentLayerDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { ServeModelFileProvider, useServeModelFileState, useServeModelFileDispatch };","import React from 'react';\nimport clsx from 'clsx';\n\n// Import Style Tools\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Import Material-Kit Components\nimport {\n\tDrawer,\n\tButton,\n \tDialog,\n \tDialogTitle,\n \tDialogContent,\n \tListItemText,\n \tListItem,\n \tList,\n \tDivider,\n \tAppBar,\n \tToolbar,\n \tIconButton,\n \tTypography,\n \tListItemIcon,\n \tListItemSecondaryAction,\n \tTextField,\n  FormControl,\n  FormHelperText,\n  Select,\n  MenuItem,\n \tPaper,\n \tSlide } from '@material-ui/core';\n\n// Import Icons\nimport CloseIcon from '@material-ui/icons/Close';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\n// Import Contexts\nimport { useEditModelDialogState, useEditModelDialogDispatch } from '../../AppStores/EditModelDialogContext';\nimport { useModelStoreState, useModelStoreDispatch } from '../../AppStores/ModelStore';\nimport { useEditLayerDialogDispatch } from '../../AppStores/EditLayerDialogContext';\nimport { useCurrentLayerDispatch } from '../../AppStores/CurrentLayerContext';\nimport { useTreePosStoreState } from '../../AppStores/TreePosStore';\nimport { useLayerInfoStoreState } from '../../AppStores/LayerInfoStore';\nimport { useModelTrainStoreState, useModelTrainStoreDispatch } from '../../AppStores/ModelTrainStore';\nimport { useServeModelFileState } from '../../AppStores/ServeModelFileContext';\n\n\nconst layer_type_map = {\n\t\"conv_layer\": \"Convolutional\",\n\t\"pool_layer\": \"Pooling\",\n\t\"full_layer\": \"Fully Connected\"\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  title: {\n    flexGrow: 1,\n  },\n\n  modelActionPanel: {\n  \tposition: 'relative',\n  \tmarginTop: '10%',\n  \tmarginLeft: '1%',\n  \theight: '40%',\n  \twidth: '95%',\n  \tbackgroundColor: \"#FF0000\"\n  },\n  modelActionPanelShift: {\n    width: `calc(95% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n\n  modelActionPanelTitle: {\n  \tposition: 'absolute',\n  \tmarginTop: '2%',\n  \tmarginLeft: '1%',\n  },\n\n  modelActionPanelSub: {\n  \tdisplay: 'absolute',\n  \tmarginTop: '10%',\n  \tmarginLeft: '10%',\n  \theight: 250,\n  \twidth: '80%',\n  \tbackgroundColor: '#0FF000'\n  },\n\n   paramTextFieldGroup: {\n  \tdisplay: \"flex\"\n  },\n  paramTextField: {\n  \tmargin: theme.spacing(1),\n  \tmaxWidth: 150\n  },\n\n  layerNameTextField: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120\n\t},\n  layerTypeSelectControl: {\n    display: \"block\",\n    margin: theme.spacing(1),\n    minWidth: 150,\n  },\n\n  resultsWindow: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    height: 600,\n    width: 1200,\n  },\n\n  lossGraphWindow: {\n    height: 500,\n    width: 500,\n    backgroundColor: '#FF00FF'\n  },\n\n  accuracyGraphWindow: {\n    height: 500,\n    width: 500,\n    backgroundColor: '#FF00FF'\n  }\n\n\n\n}));\n\n\nexport default function EditModel(params) {\n  const classes = useStyles();\n\n  // Subscribe to Contexts\n  const { open, model_key } = useEditModelDialogState();\n  const editModelDialogDispatch = useEditModelDialogDispatch();\n  const editLayerDialogDispatch = useEditLayerDialogDispatch();\n\n  const currentLayerDispatch = useCurrentLayerDispatch();\n\n  const modelStoreState = useModelStoreState();\n\n  const treePosState = useTreePosStoreState();\n  const layerInfoState = useLayerInfoStoreState();\n\n  const serveModelFileState = useServeModelFileState();\n\n  // const modelTrainStoreState = useModelTrainStoreState();\n  // const modelTrainStoreDispatch = useModelTrainStoreDispatch();\n\n  // Set Component Hooks\n  const [numEpochs, setNumEpochs] = React.useState(100)\n  const [batchSize, setBatchSize] = React.useState(256)\n  const [optimizerType, setOptimizerType] = React.useState(\"Gradient Descent\");\n  const [openViewLayers, setOpenViewLayers] = React.useState(false);\n  const [openViewResults, setOpenViewResults] = React.useState(false);\n\n\n  // Handle Dialog Opening and Closing\n  const handleClickOpen = () => {\n    editModelDialogDispatch({open: true, modek_key: null})\n  };\n\n  const handleClose = () => {\n    editModelDialogDispatch({open: false, modek_key: null})\n  };\n\n  const handleTrain = () => {\n    params.trainModel({\n      model_key: model_key,\n      num_epochs: numEpochs,\n      batch_size: batchSize,\n      optimizer_type: optimizerType\n    })\n  }\n\n  React.useEffect(() => {\n    console.log(\"model store changed\")\n  }, [modelStoreState[model_key]])\n\n  // Extract Model\n  const model = modelStoreState[model_key];\n  if (model === undefined) {\n  \treturn <div/>;\n  }\n\n  console.log(model)\n\n  if (model[\"status\"] == \"init\") {\n    console.log(\"init\")\n  }\n\n  if (model[\"status\"] == \"trained\") {\n    console.log(\"trained\")\n  }\n\n\n  ///////////////////////////////////////////////\n  // Calculate Layer List\n  ///////////////////////////////////////////////\n  const handleEditLayer = (event, position) => {\n  \tevent.preventDefault();\n\n  \t// Set Current Layer Context\n  \tcurrentLayerDispatch({sender_pos: position});\n\n    // Open Dialog\n    editLayerDialogDispatch({open: true, dialog_type: \"edit\"})\n\n  }\n\n  const layerIDs = model.layerIDs;\n  const checkAddButton = (param) => {\n   \tif (param.layer_type === 'input_layer') {\n   \t\treturn null\n   \t} else {\n   \t\treturn <Button onClick={(event) => handleEditLayer(event, param.position)}>Edit</Button>\n   \t}\n   }\n  const layer_list = (\n  \t<div style={{width: \"100%\"}}>\n  \t<List>\n      {layerIDs.map((layerID, index) => {\n        let param = layerInfoState[layerID]\n        return (\n          <ListItem key={index}>\n            <ListItemText\n            \tprimary={`${index + 1}: ${param.layer_name}`}\n            \tsecondary={layer_type_map[param.layer_type] + ' Layer'}\n            />\n             {checkAddButton(param)}\n            \n          </ListItem>)\n      })}\n    </List>\n    </div>\n\n  );\n\n  ///////////////////////////////////////////////\n  // View Layers Dialog\n  ///////////////////////////////////////////////\n  const view_layers_dialog = (\n  \t<Dialog maxWidth={'lg'} open={openViewLayers} onClose={() => setOpenViewLayers(false)}>\n  \t\t<DialogTitle>View Layers</DialogTitle>\n  \t\t<DialogContent>\n  \t\t\t{layer_list}\n  \t\t</DialogContent>\n  \t</Dialog>\n\n  \t)\n\n  ///////////////////////////////////////////////\n  // Model Information Window\n  ///////////////////////////////////////////////\n  const getModelDownload = () => {\n    if (serveModelFileState === null) {\n      return <div/>\n    } else {\n      const onClickFunction = () => {\n        var fileDownload = require('react-file-download');\n        fileDownload(serveModelFileState.model_file, 'model.json');\n      }\n      return <Button onClick={onClickFunction}>Click Here</Button>\n    }\n  }\n  const model_info_window = (\n  \t<div>\n  \t\t<Typography variant=\"h6\" align=\"left\">Model Information</Typography>\n\t\t\t<div className={classes.paramTextFieldGroup}>\n\t\t\t\t<TextField\n\t\t\t\t\tclassName={classes.layerNameTextField}\n\t        label=\"Model Name\"\n\t        defaultValue={model.model_name}\n\t      />\n\t    </div>\n      <div className={classes.paramTextFieldGroup}>\n        <Button style={{margin: 10}} variant=\"contained\" \n          onClick={() => setOpenViewLayers(true)}>\n          View Layers\n        </Button>\n        <Button style={{margin: 10}} variant=\"contained\"\n          onClick={() => params.reqModelFile({model_key})}>\n          Download Model\n        </Button>\n      </div>\n      <div className={classes.paramTextFieldGroup}>\n        {getModelDownload()}\n      </div>\n    </div>\n\t \t);\n\n  ///////////////////////////////////////////////\n  // Training Window\n  ///////////////////////////////////////////////\n  const optimizer_types = [\"Gradient Descent\", \"Adagrad\", \"RMSProp\", \"Adam\"]\n  const training_window = (\n  \t<div>\n\t\t\t<Typography variant=\"h6\" align=\"left\">Training Parameters</Typography>\n\t\t\t<div className={classes.paramTextFieldGroup}>\n\t\t\t\t<TextField\n\t\t\t\t\tclassName={classes.paramTextField}\n\t        type=\"number\"\n\t        InputLabelProps={{\n\t          shrink: true,\n\t        }}\n\t        variant=\"outlined\"\n          value={batchSize}\n          onChange={(event) => setBatchSize(event.target.value)}\n\t        helperText=\"Batch Size\"\n\t      />\n        <TextField\n          className={classes.paramTextField}\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"outlined\"\n          value={numEpochs}\n          onChange={(event) => setNumEpochs(event.target.value)}\n          helperText=\"Number of Epochs\"\n        />\n      </div>\n      <div className={classes.paramTextFieldGroup}>\n        <FormControl className={classes.layerTypeSelectControl}>\n          <Select\n            style={{minWidth: 150}}\n            labelId=\"activation-type-select-label\"\n            variant=\"outlined\"\n            value={optimizerType}\n            onChange={(event) => setOptimizerType(event.target.value)}\n          >\n            {optimizer_types.map(i => (\n              <MenuItem value={i}>{i}</MenuItem>))}\n          </Select>\n          <FormHelperText>Select Optimizer</FormHelperText>\n        </FormControl>\n      </div>\n      <div className={classes.paramTextFieldGroup}>\n\t\t    <Button style={{margin: 10}} variant=\"contained\"\n          onClick={handleTrain}>\n\t\t\t\t  Train Model\n\t\t\t\t</Button>\n        <Button style={{margin: 10}} variant=\"contained\" disabled>\n          Download Variables\n        </Button>\n      </div>\n\t\t</div>\n\n  );\n\n  ///////////////////////////////////////////////\n  // Testing Window\n  ///////////////////////////////////////////////\n  // const testing_window = (\n  // \t<div>\n\t\t// \t<Typography variant=\"h6\" align=\"left\">Testing Parameters</Typography>\n\t\t// \t<div className={classes.paramTextFieldGroup}>\n\t\t// \t\t<TextField\n\t\t// \t\t\tclassName={classes.paramTextField}\n\t //        type=\"number\"\n\t //        InputLabelProps={{\n\t //          shrink: true,\n\t //        }}\n\t //        variant=\"outlined\"\n\t //        helperText=\"Number of Epochs\"\n\t //      />\n\t //    </div>\n\t //    <div className={classes.paramTextFieldGroup}>\n\t\t//     <Button style={{margin: 10}} variant=\"contained\" disabled>\n\t\t// \t\t  Test Model\n\t\t// \t\t</Button>\n\t\t// \t\t<Button style={{margin: 10}} variant=\"contained\" disabled>\n\t\t// \t\t  View Results\n\t\t// \t\t</Button>\n\t\t// \t</div>\n\t\t// </div>\n\n  // );\n\n  ////////////////////////////////////\n  // Results Graphs\n  ///////////////////////////////////\n  \n\n  // // View Results Dialog\n  // const view_results_dialog = (\n  //   <Dialog maxWidth={'lg'} open={openViewResults} onClose={() => setOpenViewResults(false)}>\n  //     <DialogTitle>View Results</DialogTitle>\n  //     <DialogContent>\n  //       <div className={classes.resultsWindow}>\n  //         <canvas ref={lossGraphRef} className={classes.lossGraphWindow}/>\n  //         <canvas ref={accuGraphRef} className={classes.accuracyGraphWindow}/>\n  //       </div>\n\n  //     </DialogContent>\n  //   </Dialog>\n\n  //   )\n\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose}>\n      \t<DialogTitle>View Model</DialogTitle>\n      \t<DialogContent>\n      \t\t{model_info_window}\n      \t\t{view_layers_dialog}\n\t      \t{training_window}\n\t      </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\n\nconst ChooseDatasetDialogStateContext = React.createContext(null);\nconst ChooseDatasetDialogDispatchContext = React.createContext(null);\n\nconst ChooseDatasetDialogContextProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [openDialog, setOpenDialog] = React.useState({open: false});\n\n\treturn (\n\t\t<ChooseDatasetDialogStateContext.Provider value={ openDialog }>\n\t\t\t<ChooseDatasetDialogDispatchContext.Provider value={ setOpenDialog }>\n\t\t\t\t{children}\n\t\t\t</ChooseDatasetDialogDispatchContext.Provider>\n\t\t</ChooseDatasetDialogStateContext.Provider>\n\t)\n}\n\nconst useChooseDatasetDialogState = () => {\n  const context = React.useContext(ChooseDatasetDialogStateContext);\n  if (context === undefined) {\n    alert(\"Please place useDialogState in ChooseDatasetDialogStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useChooseDatasetDialogDispatch = () => {\n  const context = React.useContext(ChooseDatasetDialogDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useDialogDispatch in ChooseDatasetDialogDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { ChooseDatasetDialogContextProvider, useChooseDatasetDialogState, useChooseDatasetDialogDispatch };","import React from 'react';\nimport clsx from 'clsx';\n\n// Import Style Tools\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Import Material-Kit Components\nimport {\n\tDrawer,\n\tButton,\n \tDialog,\n \tDialogTitle,\n \tDialogContent,\n \tListItemText,\n \tListItem,\n \tList,\n \tDivider,\n \tAppBar,\n \tToolbar,\n \tIconButton,\n \tTypography,\n \tListItemIcon,\n \tListItemSecondaryAction,\n \tTextField,\n \tPaper,\n \tSlide } from '@material-ui/core';\n\n// Import Icons\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n// Import Contexts\nimport { useChooseDatasetDialogState, useChooseDatasetDialogDispatch } from '../../AppStores/ChooseDatasetDialogContext';\nimport { useLayerInfoStoreState, useLayerInfoStoreDispatch } from '../../AppStores/LayerInfoStore';\n\nconst layer_type_map = {\n\t\"conv_layer\": \"Convolutional\",\n\t\"pool_layer\": \"Pooling\",\n\t\"full_layer\": \"Fully Connected\"\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  modelActionPanel: {\n  \tposition: 'relative',\n  \tmarginTop: '10%',\n  \tmarginLeft: '1%',\n  \theight: '40%',\n  \twidth: '95%',\n  \tbackgroundColor: \"#FF0000\"\n  },\n\n  modelActionPanelTitle: {\n  \tposition: 'absolute',\n  \tmarginTop: '2%',\n  \tmarginLeft: '1%',\n  },\n\n  modelActionPanelSub: {\n  \tdisplay: 'absolute',\n  \tmarginTop: '10%',\n  \tmarginLeft: '10%',\n  \theight: 250,\n  \twidth: '80%',\n  \tbackgroundColor: '#0FF000'\n  },\n\n   paramTextFieldGroup: {\n  \tdisplay: \"flex\"\n  },\n  paramTextField: {\n  \tmargin: theme.spacing(1),\n  \tmaxWidth: 150\n  },\n\n  layerNameTextField: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120\n\t},\n\n}));\n\n\n\nexport default function ChooseDataset() {\n  const classes = useStyles();\n\n  // Subscribe to Context\n  const { open } = useChooseDatasetDialogState();\n  const datasetDialogDispatch = useChooseDatasetDialogDispatch();\n\n  const layerInfoStore = useLayerInfoStoreState();\n  const layerInfoStoreDispatch = useLayerInfoStoreDispatch();\n\n\n  const handleClose = () => {\n    datasetDialogDispatch({open: false})\n  };\n\n  // Set Input Layer Information on Click\n  const setDataset = (event, dataset_name) => {\n    event.preventDefault();\n\n    let layer_params;\n\n    switch (dataset_name) {\n      case \"cifar10\": {\n        layer_params = {\n          dataset_name: \"CIFAR10\",\n          shape: \"32 x 32 x 3\",\n          labels: 10\n        }\n        break;\n      }\n      case \"cifar100\": {\n        layer_params = {\n          dataset_name: \"CIFAR100\",\n          shape: \"32 x 32 x 1\",\n          labels: 100\n        }\n        break;\n      }\n      case \"digits_mnist\": {\n        layer_params = {\n          dataset_name: \"MNIST Digits\",\n          shape: \"28 x 28 x 1\",\n          labels: 10\n        }\n        break;\n      }\n      case \"fashion_mnist\": {\n        layer_params = {\n          dataset_name: \"MNSIT Fashion\",\n          shape: \"28 x 28 x 1\",\n          labels: 10\n        }\n        break;\n      }\n    }\n\n    // Update Input Layer Parameters\n    layerInfoStoreDispatch({\n      type: 'update',\n      layerID: \"000\",\n      layer_info: {\n        layer_params: layer_params\n      }\n    });\n\n    datasetDialogDispatch({open: false})\n  }\n\n\n\n\n\n  ///////////////////////////////////////////////\n  // Choose Dataset Window\n  ///////////////////////////////////////////////\n  const choose_dataset_window = (\n  \t<List>\n  \t\t<ListItem>\n        <ListItemText \n          primary=\"CIFAR10\" \n          secondary=\"Dataset of 50,000 32x32 color training images, labeled over 10 categories, and 10,000 test images.\" />\n        <ListItemSecondaryAction>\n          <IconButton edge=\"end\" aria-label=\"Choose Dataset\"\n            onClick={(event) => setDataset(event, \"cifar10\")}>\n            <AddCircleIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n      <ListItem>\n        <ListItemText \n          primary=\"CIFAR100\" \n          secondary=\"Dataset of 50,000 32x32 color training images, labeled over 100 categories, and 10,000 test images.\" />\n        <ListItemSecondaryAction>\n          <IconButton edge=\"end\" aria-label=\"Choose Dataset\"\n            onClick={(event) => setDataset(event, \"cifar100\")}>\n            <AddCircleIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n      <ListItem>\n        <ListItemText \n          primary=\"MNIST database of handwritten digits\" \n          secondary=\"Dataset of 60,000 28x28 grayscale images of the 10 digits, along with a test set of 10,000 images.\" />\n        <ListItemSecondaryAction>\n          <IconButton edge=\"end\" aria-label=\"Choose Dataset\"\n            onClick={(event) => setDataset(event, \"digits_mnist\")}>\n            <AddCircleIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n      <ListItem>\n        <ListItemText \n          primary=\"Fashion-MNIST database of fashion articles\" \n          secondary=\"Dataset of 60,000 28x28 grayscale images of 10 fashion categories, along with a test set of 10,000 images. This dataset can be used as a drop-in replacement for MNIST. The class labels are:\" />\n        <ListItemSecondaryAction>\n          <IconButton edge=\"end\" aria-label=\"Choose Dataset\"\n            onClick={(event) => setDataset(event, \"fashion_mnist\")}>\n            <AddCircleIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n\n  \t</List>\n\t \t);\n\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose}>\n      \t<DialogTitle>Choose Dataset</DialogTitle>\n      \t<DialogContent>\n      \t\t{choose_dataset_window}\n\t      </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","// Set up socket connection\nvar socket = require('socket.io-client')('http://localhost:8000');\n\nconst emitModel = ({ model_key, layer_params }) => {\n\tsocket.emit(\"add_new_model\", {data: {\n\t\tmodel_key: model_key,\n\t\tlayer_params: layer_params\n\t}})\n}\n\nconst emitTrain = ({ model_key, num_epochs, batch_size, optimizer_type }) => {\n\tsocket.emit(\"train_new_model\", {data: {\n\t\tmodel_key: model_key,\n\t\tnum_epochs: num_epochs,\n\t\tbatch_size: batch_size,\n\t\toptimizer_type: optimizer_type\n\t}})\n}\n\nconst requestModelFile = ({model_key}) => {\n\tsocket.emit(\"request_model_file\", {data: {\n\t\tmodel_key: model_key,\n\t}})\n}\n\n\n\nexport { socket, emitModel, emitTrain, requestModelFile }","import React from 'react';\n\nimport io from 'socket.io-client';\n\n// Import Material-UI Components\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// Import Custom Components\nimport LayerTree from './Components/LayerTree';\nimport AppBar from './Components/Header';\nimport EditLayer from './Components/Dialogs/EditLayer';\nimport EditModel from './Components/Dialogs/EditModel';\nimport ChooseDataset from './Components/Dialogs/ChooseDataset';\n\n// Import client code\nimport { socket, emitModel, emitTrain, requestModelFile } from './client'\n\n// Import Contexts\nimport { useEditLayerDialogDispatch } from './AppStores/EditLayerDialogContext';\nimport { useEditModelDialogDispatch } from './AppStores/EditModelDialogContext';\nimport { useCurrentLayerDispatch } from './AppStores/CurrentLayerContext';\nimport { useLayerInfoStoreState, useLayerInfoStoreDispatch } from './AppStores/LayerInfoStore';\nimport { useModelStoreState, useModelStoreDispatch } from './AppStores/ModelStore';\nimport { useChooseDatasetDialogState, useChooseDatasetDialogDispatch } from './AppStores/ChooseDatasetDialogContext';\nimport { useServeModelFileDispatch } from './AppStores/ServeModelFileContext';\n\n\nexport default function TensorShow() {\n\n  // Subscribe to Contexts\n  const dialogDispatch = useEditLayerDialogDispatch();\n  const editModelDispatch = useEditModelDialogDispatch();\n  const currentLayerDispatch = useCurrentLayerDispatch();\n  \n  const layerInfoStoreState = useLayerInfoStoreState();\n  const layerInfoStoreDispatch = useLayerInfoStoreDispatch();\n\n  const modelStoreState = useModelStoreState();\n  const modelStoreDispatch = useModelStoreDispatch();\n\n  const chooseDatasetDialogState = useChooseDatasetDialogState();\n  const chooseDatasetDialogDispatch = useChooseDatasetDialogDispatch();\n\n  const serveModelFileDispatch = useServeModelFileDispatch();\n\n  // Set up Socket Listeners\n  React.useEffect(() => {\n\n    socket.on(\"emit_model_file\", (data) => {\n      console.log(\"Received Model File\")\n\n      serveModelFileDispatch({\n        model_key: data.model_key,\n        model_file: data.model_file\n      })\n    })\n\n\n    socket.on(\"training_end\", (data) => {\n      console.log(\"Train End\")\n\n      modelStoreDispatch({\n        type: \"update_status\",\n        model_key: data.model_key,\n        status: \"trained\"\n      })\n    })\n\n   \n\n  })\n\n\n  ////////////////////////////////////////////////\n  // Add Model\n  ////////////////////////////////////////////////\n  const addModel = ({parent_pos, model_name, model_key}) => {\n\n    // Calculate the layers in the model\n    var model_layers = []\n    let tmp_parent_pos = parent_pos;\n    let tmp_layer_key, tmp_layer_info;\n\n    // Walk up tree to root\n    while (tmp_parent_pos !== \"root\") {\n\n      tmp_layer_key = `${tmp_parent_pos.row}${tmp_parent_pos.group}${tmp_parent_pos.slot}`\n      tmp_layer_info = layerInfoStoreState[tmp_layer_key]\n      tmp_parent_pos = tmp_layer_info.parent_pos;\n\n      model_layers.push(tmp_layer_key);\n    }\n\n    \n    // Get Layer Parameters\n    var layer_params = [];\n    var layerIDs = model_layers.map(layer_pos_key => {\n\n      layerInfoStoreDispatch({\n        type: 'add_to_model',\n        layerID: layer_pos_key,\n        model_key: model_key\n      })\n\n      layer_params.push(layerInfoStoreState[layer_pos_key])\n      return layer_pos_key;\n    });\n\n    layerIDs.reverse();\n    layer_params.reverse();\n\n    console.log(layerIDs)\n\n    // Update the ModelStore\n    modelStoreDispatch({\n      type: 'add_model', \n      model_key: model_key,\n      model_name: model_name,\n      layerIDs: layerIDs\n    })\n\n\n    emitModel({\n      model_key: model_key,\n      layer_params: layer_params\n    })\n  }\n\n  const editModelLayer = ({model_key, layer_key}) => {\n    // Given layer_key, update model on server\n\n    const model_params = modelStoreState[model_key];\n    const layerIDs = model_params.layerIDs;\n\n    let layer_params = []\n    for (var i=0; i<layerIDs.length; i++) {\n      layer_params.push(layerInfoStoreState[layerIDs[i]])\n    }\n\n    emitModel({\n      model_key: model_key,\n      layer_params: layer_params\n    })\n\n  }\n\n  const trainModel = ({ model_key, num_epochs, batch_size, optimizer_type }) => {\n\n    // Emit the new model to server for training\n    emitTrain({\n      model_key: model_key,\n      num_epochs: num_epochs,\n      batch_size: batch_size,\n      optimizer_type: optimizer_type\n    })\n\n    // Add the model to TrainModelStore\n  }\n\n  const reqModelFile = ({ model_key }) => {\n\n    requestModelFile({\n      model_key: model_key\n    })\n  }\n\n  ////////////////////////////////////////////////\n  // Add Child\n  ////////////////////////////////////////////////\n  const addChild = (event, sender_pos) => {\n    event.preventDefault()\n    \n    // Set the current layer (the sender to dialog)\n    currentLayerDispatch({sender_pos: sender_pos});\n\n    // Open Dialog\n    dialogDispatch({open: true, dialog_type: \"add\"});\n    return;\n  }\n\n  ////////////////////////////////////////////////\n  // Edit Layer\n  ////////////////////////////////////////////////\n  const editLayer = (event, sender_pos) => {\n    event.preventDefault();\n\n    // Set the current layer (the sender to dialog)\n    currentLayerDispatch({sender_pos: sender_pos});\n\n    // Open Dialog\n    dialogDispatch({open: true, dialog_type: \"edit\"})\n\n  }\n\n  ////////////////////////////////////////////////\n  // Choose Dataset\n  ////////////////////////////////////////////////\n  const chooseDataset = (event) => {\n    event.preventDefault();\n\n    chooseDatasetDialogDispatch({open: true})\n  }\n\n\n\n  ////////////////////////////////////////////////\n  // Edit Model\n  ////////////////////////////////////////////////\n  const editModel = (event, model_key) => {\n    event.preventDefault();\n\n    console.log(model_key)\n    // Open Dialog\n    editModelDispatch({open: true, model_key: model_key})\n\n    console.log(\"Edit Model\")\n  }\n\n\n\n\n  return (\n    <div>\n    \t<CssBaseline/>\n    \t<AppBar/>\n    \t<div style={{position: \"absolute\", top: \"10%\"}}>\n      \t<LayerTree \n            addChild={addChild} \n            editLayer={editLayer} \n            editModel={editModel} \n            chooseDataset={chooseDataset}\n        />\n      \t<EditLayer \n            addModel={addModel}\n            editModelLayer={editModelLayer}\n        />\n        <EditModel trainModel={trainModel} reqModelFile={reqModelFile}/>\n        <ChooseDataset />\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Import Custom Components\nimport TensorShow from './TensorShow';\n\n// Import Contexts\nimport { TreePosStoreProvider } from './AppStores/TreePosStore';\nimport { EditLayerDialogContextProvider } from './AppStores/EditLayerDialogContext';\nimport { CurrentLayerContextProvider } from './AppStores/CurrentLayerContext';\nimport { LayerInfoStoreProvider } from './AppStores/LayerInfoStore';\nimport { ModelStoreProvider } from './AppStores/ModelStore';\nimport { EditModelDialogContextProvider } from './AppStores/EditModelDialogContext';\nimport { ChooseDatasetDialogContextProvider } from './AppStores/ChooseDatasetDialogContext';\nimport { ModelTrainStoreProvider } from './AppStores/ModelTrainStore';\nimport { ServeModelFileProvider } from './AppStores/ServeModelFileContext';\n\nfunction App() {\n  return (\n    <div>\n     \n      <TreePosStoreProvider>\n      <CurrentLayerContextProvider>\n      <EditModelDialogContextProvider>\n      <LayerInfoStoreProvider>\n      <ModelStoreProvider>\n      <ChooseDatasetDialogContextProvider>\n      <EditLayerDialogContextProvider>\n      <ModelTrainStoreProvider>\n      <ServeModelFileProvider>\n      \n          <TensorShow/>\n\n      </ServeModelFileProvider>\n      </ModelTrainStoreProvider>\n      </EditLayerDialogContextProvider>\n      </ChooseDatasetDialogContextProvider>\n      </ModelStoreProvider>\n      </LayerInfoStoreProvider>\n      </EditModelDialogContextProvider>\n      </CurrentLayerContextProvider>\n      </TreePosStoreProvider>\n\n   </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}