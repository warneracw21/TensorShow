{"version":3,"sources":["styles.js","SVGComponents/LayerCardSVG.js","AppStores/TreePosStore.js","AppStores/DialogContext.js","AppStores/CurrentLayerContext.js","AppStores/LayerInfoStore.js","LayerTree.js","Dialogs/EditLayer.js","TensorShow.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","app","flexGrow","LayerCardSVG","params","layerName","layerType","inputShape","outputShape","addChild","editLayer","x","y","width","height","version","xmlnsXlink","x1","y1","x2","y2","id","stopColor","offset","d","filterUnits","radius","operator","in","result","dx","dy","stdDeviation","values","type","in2","stroke","strokeWidth","fill","fillRule","fillOpacity","filter","xlinkHref","style","mixBlendMode","onClick","fontFamily","fontSize","fontWeight","event","sender_pos","TreePosStoreStateContext","React","createContext","TreePosStoreDispatchContext","propogateWidth","PositionTree","row_position","group_key_ind","slot_key_ind","group_key","slot_key","slot_keys","child_group","running_offset","child_row_pos","parent_row_pos","new_tree","child_group_keys","Object","keys","rows","groups","sort","length","slots","disp","tree","row_pos","group_keys","running_width","updateRow","sender_group","sender_slot","TreePosReducer","state","action","new_state","sender_row","row","group","slot","deleteNode","tmp_group_key","undefined","delete_row","render","console","log","maximum_row","Math","max","map","i","parseInt","parent_group_pos","parent_slot_pos","parent_slot","group_path","slot_path","child_group_pos","child_slot_pos","connection","parent_group_keys","parent_slot_keys","parent_row_key","parent_group_key","parent_slot_key","tmp_parent_row","tmp_parent_group","parent_row_keys","j","k","0","active_connections","hash","push","TreePosStoreProvider","init_card_pos","Base64","stringify","sha256","useReducer","treePosStoreState","treePosStoreDispatch","Provider","value","children","useTreePosStoreState","context","useContext","alert","useTreePosStoreDispatch","DialogStateContext","DialogDispatchContext","DialogContextProvider","useState","openDialog","setOpenDialog","useDialogDispatch","CurrentLayerStateContext","CurrentLayerDispatchContext","CurrentLayerContextProvider","currentLayer","setCurrentLayer","LayerInfoStoreStateContext","LayerInfoStoreDispatchContext","LayerInfoStoreProvider","layerID","layer_info","layer_name","layer_type","layer_params","layerInfoStoreState","layerInfoStoreDispatch","useLayerInfoStoreState","dpi","window","devicePixelRatio","LayerTree","cardPosState","cardPosDispatch","dialogDispatch","currentLayerDispatch","useCurrentLayerDispatch","useEffect","row_key","row_svg","group_svg","slot_svg","group_count","slot_count","start_point","end_point","tmp_slot_keys","tmp_slot","tmp_group","preventDefault","random","bezier_points","canvas_elements","row_svgs","pos_tree","row_keys","row_count","group_svgs","slot_svgs","position","top","left","textAlign","key","canv_params","start_y","end_y","start_x","end_x","q","zIndex","TreeSVG","onlyUnique","index","self","indexOf","EditLayer","dialogState","useDialogState","currentLayerState","useCurrentLayerState","new_hash","treePosState","treePosDispatch","useLayerInfoStoreDispatch","Dialog","open","onClose","DialogTitle","display","float","DialogActions","Button","color","connection_pos","new_sender_pos","TensorShow","App","classes","className","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cb96476a.chunk.js","sourcesContent":["///////////////////////////////////////////////////////////\n// Module for specifying styles \n///////////////////////////////////////////////////////////\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  app: {\n    flexGrow: 1\n  }\n\n\n}));\n\nconst useSVGStyles = () => ({\n\n  circleRed: {\n    fill: 'red'\n  },\n  circleYellow: {\n    fill: 'yellow'\n  }\n})\n\nexport { useStyles, useSVGStyles }","import React from 'react';\n\nexport default function LayerCardSVG(params) {\n\n  const layerName = params.layerName;\n  const layerType = params.layerType;\n  const inputShape = params.inputShape;\n  const outputShape = params.outputShape;\n\n  // Get Button Methods\n  const addChild = params.addChild;\n  const editLayer = params.editLayer;\n\n\n  return (\n    <svg x={params.x} y={params.y} width=\"210px\" height=\"210px\" version=\"1.1\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n      <defs>\n          <linearGradient x1=\"47.0796717%\" y1=\"83.3533249%\" x2=\"27.04726%\" y2=\"185.215584%\" id=\"linearGradient-1\">\n              <stop stopColor=\"#FFFFFF\" offset=\"0%\"></stop>\n              <stop stopColor=\"#000000\" offset=\"100%\"></stop>\n          </linearGradient>\n          <path d=\"M204,174 C204,189.463973 191.463973,202 176,202 L32,202 C16.536027,202 4,189.463973 4,174 L4,2 L204,2 L204,174 Z\" id=\"path-2\"></path>\n          <filter x=\"-5.5%\" y=\"-5.5%\" width=\"113.0%\" height=\"113.0%\" filterUnits=\"objectBoundingBox\" id=\"filter-3\">\n              <feMorphology radius=\"2\" operator=\"dilate\" in=\"SourceAlpha\" result=\"shadowSpreadOuter1\"></feMorphology>\n              <feOffset dx=\"2\" dy=\"2\" in=\"shadowSpreadOuter1\" result=\"shadowOffsetOuter1\"></feOffset>\n              <feGaussianBlur stdDeviation=\"2\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"></feGaussianBlur>\n              <feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0\" type=\"matrix\" in=\"shadowBlurOuter1\"></feColorMatrix>\n          </filter>\n          <path d=\"M204,46.4725275 C204,61.123246 188.777681,73 170,73 L38,73 C19.2223185,73 4,61.123246 4,46.4725275 L4,2 L204,2 L204,46.4725275 Z\" id=\"path-4\"></path>\n          <filter x=\"-3.5%\" y=\"-7.0%\" width=\"107.0%\" height=\"119.7%\" filterUnits=\"objectBoundingBox\" id=\"filter-5\">\n              <feOffset dx=\"0\" dy=\"2\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"></feOffset>\n              <feGaussianBlur stdDeviation=\"2\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"></feGaussianBlur>\n              <feComposite in=\"shadowBlurOuter1\" in2=\"SourceAlpha\" operator=\"out\" result=\"shadowBlurOuter1\"></feComposite>\n              <feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0\" type=\"matrix\" in=\"shadowBlurOuter1\"></feColorMatrix>\n          </filter>\n      </defs>\n      <g id=\"LayerCard\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n          <g id=\"LayerCardBase\">\n              <use fill=\"black\" fillOpacity=\"1\" filter=\"url(#filter-3)\" xlinkHref=\"#path-2\"></use>\n              <use fill=\"url(#linearGradient-1)\" fillRule=\"evenodd\" xlinkHref=\"#path-2\"></use>\n          </g>\n          <g id=\"LayerTitleBox\">\n              <use fill=\"black\" fillOpacity=\"1\" filter=\"url(#filter-5)\" xlinkHref=\"#path-4\"></use>\n              <use fillOpacity=\"0.913625437\" fill=\"#FF8105\" fillRule=\"evenodd\" style={{mixBlendMode: \"darken\"}} xlinkHref=\"#path-4\"></use>\n          </g>\n          <path d=\"M121.320755,52 C128.213894,52 133.82228,56.3383345 133.995859,61.7418955 L134,62 L134,73 L70,73 L70,62 C70,56.4771525 75.6766915,52 82.6792453,52 L121.320755,52 Z\" id=\"EditButton\" onClick={editLayer} fillOpacity=\"0.4\" fill=\"#000000\"></path>\n          <text id=\"EditLayerText\" fontFamily=\"Helvetica-Bold, Helvetica\" fontSize=\"8\" fontWeight=\"bold\" fill=\"#000000\">\n            <tspan x=\"82\" y=\"66\">Edit Layer</tspan>\n          </text>\n          <text id=\"LayerTitle\" fontFamily=\"Helvetica-Bold, Helvetica\" fontSize=\"20\" fontWeight=\"bold\" fill=\"#F6EEEA\">\n              <tspan x=\"44.8007812\" y=\"27\">{layerName}</tspan>\n          </text>\n          <rect id=\"InfoLabelBox\" x=\"12\" y=\"83\" width=\"61\" height=\"83\"></rect>\n          <rect id=\"InfoTextBox\" x=\"75\" y=\"83\" width=\"119\" height=\"83\"></rect>\n          <text id=\"LayerTypeLabe;\" fontFamily=\"Helvetica-Light, Helvetica\" fontSize=\"10\" fontWeight=\"300\" fill=\"#000000\">\n              <tspan x=\"48.61\" y=\"99\">Type</tspan>\n          </text>\n          <text id=\"InputShapeLabel\" fontFamily=\"Helvetica-Light, Helvetica\" fontSize=\"10\" fontWeight=\"300\" fill=\"#000000\">\n              <tspan x=\"18.53\" y=\"127\">Input Shape</tspan>\n          </text>\n          <text id=\"OutputShapeLabel\" fontFamily=\"Helvetica-Light, Helvetica\" fontSize=\"10\" fontWeight=\"300\" fill=\"#000000\">\n              <tspan x=\"10.75\" y=\"155\">Output Shape</tspan>\n          </text>\n          <line x1=\"82\" y1=\"166\" x2=\"82\" y2=\"83\" id=\"InfoDivider\" stroke=\"#979797\"></line>\n          <text id=\"LayerTypeText\" fontFamily=\"Helvetica-Light, Helvetica\" fontSize=\"10\" fontWeight=\"300\" fill=\"#000000\">\n              <tspan x=\"87\" y=\"93\">{layerType}</tspan>\n          </text>\n          <text id=\"InputShapeText\" fontFamily=\"Helvetica-Light, Helvetica\" fontSize=\"10\" fontWeight=\"300\" fill=\"#000000\">\n              <tspan x=\"87\" y=\"123\">{inputShape}</tspan>\n          </text>\n          <text id=\"OutputShapeText\" fontFamily=\"Helvetica-Light, Helvetica\" fontSize=\"10\" fontWeight=\"300\" fill=\"#000000\">\n              <tspan x=\"87\" y=\"151\">{outputShape}</tspan>\n          </text>\n          <path d=\"M142.858491,176 C157.848332,176 170,181.596441 170,188.5 C170,188.667706 169.992829,188.834641 169.97862,189.000742 L170,189 L170,202 L33,202 L33,189 L33.0213798,189.000742 C33.0071711,188.834641 33,188.667706 33,188.5 C33,181.596441 45.1516677,176 60.1415094,176 L142.858491,176 Z\" id=\"Toolbar\" fillOpacity=\"0.4\" fill=\"#000000\" onClick={(event) => addChild(event, params.sender_pos)}></path>\n        <text id=\"AddLayerText\" fontFamily=\"Helvetica-Bold, Helvetica\" fontSize=\"10\" fontWeight=\"bold\" fill=\"#FFFFFF\" fillOpacity=\"0.734238418\">\n            <tspan x=\"75\" y=\"191\">Add Layer</tspan>\n        </text>\n      </g>\n    </svg>\n  )\n}\n","import React from 'react';\nimport sha256 from 'crypto-js/sha256';\nimport Base64 from 'crypto-js/enc-base64';\n\nconst TreePosStoreStateContext = React.createContext(null);\nconst TreePosStoreDispatchContext = React.createContext(null);\n\n////////////////////////////////////////////////////////////////////////\n// Set Constants\n////////////////////////////////////////////////////////////////////////\nconst SLOT_HEIGHT = 300;\nconst SLOT_WIDTH = 250;\n\nconst ROW_INIT = 0;\nconst ROW_DIFF = 300;\n\n\n\nconst updateRow= (tree, row_pos) => {\n\n  // Declare Variables  \n  var group_keys, slot_keys;\n  var group_key_ind, slot_key_ind;\n  var group_key, slot_key;\n\n  ////////////////////////////////////////////////////////////////////////\n  // 1) Update Group Width\n  ////////////////////////////////////////////////////////////////////////\n  // Iterate over groups in row\n  group_keys = Object.keys(tree.rows[row_pos].groups);\n  group_keys.sort()\n  var running_width;\n  for (group_key_ind=0; group_key_ind<group_keys.length; group_key_ind++) {\n    running_width = 0;\n    group_key = group_keys[group_key_ind];\n    slot_keys = Object.keys(tree.rows[row_pos].groups[group_key].slots)\n\n    // Iterate over slots in group\n    for (slot_key_ind=0; slot_key_ind<slot_keys.length; slot_key_ind++) {\n      slot_key = slot_keys[slot_key_ind];\n      running_width += tree.rows[row_pos].groups[group_key].slots[slot_key].disp.width;\n    }\n\n    // Update group width\n    tree.rows[row_pos].groups[group_key].disp.width = running_width;\n  }\n\n  ////////////////////////////////////////////////////////////////////////\n  // 2) Update Groups Offset\n  ////////////////////////////////////////////////////////////////////////\n  var running_offset = 0;\n\n  // Iterate over groups in row\n  group_keys = Object.keys(tree.rows[row_pos].groups);\n  group_keys.sort()\n  for (group_key_ind=0; group_key_ind<group_keys.length; group_key_ind++) {\n    group_key = group_keys[group_key_ind];\n\n    // 1) Update width with current running offset\n    tree.rows[row_pos].groups[group_key].disp.x = running_offset;\n\n    // 2) Add this groups width to running offset\n    running_offset += tree.rows[row_pos].groups[group_key].disp.width;\n  }\n\n  ////////////////////////////////////////////////////////////////////////\n  // 3) Update Row Width\n  ////////////////////////////////////////////////////////////////////////\n  // Set the row width to the running total of the group offsets\n  tree.rows[row_pos].disp.width = running_offset;\n\n  return tree;\n\n}\n\nconst propogateWidth = (PositionTree, row_position) => {\n\n \n  // Pull Child Position Attributes\n  const child_row_pos = row_position;\n\n  // Calculate Parent Position Attributes\n  const parent_row_pos = child_row_pos - 1;\n\n\n  let new_tree = { ...PositionTree };\n\n  var group_key_ind, slot_key_ind;\n  var group_key, slot_key;\n  var slot_keys;\n  var child_group, child_slot, parent_group, parent_slot;\n\n  \n\n  ////////////////////////////////////////////////////////////////////////\n  // 1) Update Child Slot Offsets\n  ////////////////////////////////////////////////////////////////////////\n  // Update slot offsets (iterate over slot widths)\n  var child_group_keys = Object.keys(new_tree.rows[child_row_pos].groups);\n  child_group_keys.sort()\n\n  // Iterate over groups in child row\n  var running_offset;\n  for (group_key_ind=0; group_key_ind<child_group_keys.length; group_key_ind++) {\n    running_offset = 0;\n    group_key = child_group_keys[group_key_ind];\n    slot_keys = Object.keys(new_tree.rows[child_row_pos].groups[group_key].slots).sort()\n\n    for (slot_key_ind=0; slot_key_ind<slot_keys.length; slot_key_ind++) {\n      slot_key = slot_keys[slot_key_ind];\n\n      // 1) Update width with current running offset\n      new_tree.rows[child_row_pos].groups[group_key].slots[slot_key].disp.x = running_offset;\n\n      // 2) Add this groups width to running offset\n      running_offset += new_tree.rows[child_row_pos].groups[group_key].slots[slot_key].disp.width;\n\n    }\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////\n  // 2) Update Child Row\n  ////////////////////////////////////////////////////////////////////////\n  // a) Update group width\n  // b) Update groups offset\n  // c) Update row width\n  new_tree = updateRow(new_tree, child_row_pos);\n\n  ////////////////////////////////////////////////////////////////////////\n  // BASE CASE: Child Row is already 0\n  ////////////////////////////////////////////////////////////////////////\n  if (parent_row_pos == -1) {\n    // console.log(\"Returning\")\n    return new_tree;\n  }\n\n  // ////////////////////////////////////////////////////////////////////////\n  // // 3) Update Parent Slot Width Offsets\n  // ////////////////////////////////////////////////////////////////////////\n  for (group_key_ind=0; group_key_ind<child_group_keys.length; group_key_ind++) {\n    group_key = child_group_keys[group_key_ind];\n    child_group = new_tree.rows[child_row_pos].groups[group_key]\n\n    // Find parent slot\n    group_key = child_group.sender_group;\n    slot_key = child_group.sender_slot;\n\n    // Set parent slot width\n    new_tree.rows[child_row_pos - 1].groups[group_key].slots[slot_key].disp.width = child_group.disp.width\n\n\n  }\n\n  return propogateWidth(new_tree, parent_row_pos); \n}\n\nconst deleteNode = (tree, row_pos, group_key) => {\n\n\n  var group_key_ind, tmp_group_key;\n  var slot_key_ind, slot_key;\n  var next_group_key;\n\n\n  // Check if row is undefined (Previous Node was Leaf)\n  if (tree.rows[row_pos] === undefined) {\n    return\n  }\n\n  // Check if group is undefiend (Previous Node was Leaf)\n  if (tree.rows[row_pos].groups[group_key] === undefined) {\n    return;\n  }\n\n  var slot_keys = Object.keys(tree.rows[row_pos].groups[group_key].slots).sort();\n  if (slot_keys === undefined) {\n    return;\n  }\n\n  // Iterate over the slots in this group\n  for (slot_key_ind=0; slot_key_ind<slot_keys.length; slot_key_ind++) {\n    slot_key = slot_keys[slot_key_ind];\n\n    // Calculate next group_key\n    next_group_key = `${group_key}${slot_key}`\n\n    // Call recursion (safety checks in place!)\n    deleteNode(tree, row_pos + 1, next_group_key);\n\n    // Delete the slot\n    delete tree.rows[row_pos].groups[group_key].slots[slot_key];\n  }\n\n  // Delete the group\n  delete tree.rows[row_pos].groups[group_key];\n\n  // Check if row needs to be deleted\n  var delete_row = true;\n  const group_keys = Object.keys(tree.rows[row_pos].groups)\n  for (group_key_ind=0; group_key_ind<group_keys.length; group_key_ind++) {\n    tmp_group_key = group_keys[group_key_ind];\n\n    slot_keys = Object.keys(tree.rows[row_pos].groups[tmp_group_key].slots) \n    for (slot_key_ind=0; slot_key_ind<slot_keys.length; slot_key_ind++) {\n      slot_key = slot_keys[slot_key_ind];\n\n      if (tree.rows[row_pos].groups[tmp_group_key].slots[slot_key].render) {\n        delete_row = false\n      }\n    }\n  }\n\n  ///////////////\n  // Delete the row\n  ///////////////\n  if (delete_row) {\n    console.log(\"DELETE ROW:\", row_pos)\n    delete tree.rows[row_pos]\n  }\n\n}\n\n\nconst TreePosReducer = (state, action) => {\n\n  switch (action.type) {\n    case ('init'): {\n      return state;\n    }\n\n    case ('delete_node'): {\n\n      // Make deep copy of old state\n      var new_state = {...state};\n\n      const sender_row = action.sender_pos.row;\n      const sender_group = action.sender_pos.group;\n      const sender_slot = action.sender_pos.slot;\n\n      \n      // Calculate the first child group key\n      var group_key = `${sender_group}${sender_slot}`;\n\n      // Delete All Children\n      deleteNode(new_state, sender_row + 1, group_key);\n\n      // Delete sender\n      delete new_state.rows[sender_row].groups[sender_group].slots[sender_slot]\n\n      // Propogate Changes\n      const maximum_row = Math.max(...Object.keys(new_state.rows).map(i => parseInt(i, 10)))\n      new_state = propogateWidth(\n        {...new_state}, \n        maximum_row, \n      );\n\n      return new_state;\n\n    }\n    \n    case ('add_child'): {\n\n      // Make deep copy of old state\n      var new_state = {...state};\n\n      // Grab Row and Group from Sender\n      const parent_row_pos = action.sender_pos.row;\n      const parent_group_pos = action.sender_pos.group;\n      const parent_slot_pos = action.sender_pos.slot;\n\n      // Find Row, Group and Slot of Parent in State\n      const parent_row = new_state.rows[parent_row_pos];\n      const parent_group = parent_row.groups[parent_group_pos];\n      const parent_slot = parent_group.slots[parent_slot_pos];\n      \n      // Get history\n      const parent_group_path = parent_slot.group_path;\n      const parent_slot_path = parent_slot.slot_path;\n\n      // Calculate Child Keys\n      const child_row_pos = parent_row_pos + 1;\n      const child_group_pos = `${parent_group_pos}${parent_slot_pos}`;\n      const child_slot_pos = action.sender_pos.connection;\n\n      //////////////////////////////////////////////////////\n      // Are we adding a new row?\n      //////////////////////////////////////////////////////\n      if (new_state.rows[parent_row_pos + 1] === undefined) {\n        new_state.rows[parent_row_pos + 1] = {\n          disp: {\n            x: 0,\n            y: ROW_INIT + (parent_row_pos + 1)*ROW_DIFF,\n            width: SLOT_WIDTH,\n            height: SLOT_HEIGHT\n          },\n          groups: {}\n        }\n        \n      }\n\n      //////////////////////////////////////////////////////\n      // Are we adding a new group?\n      // 1) for each group in parent row\n        // 2 for each slot in the group\n          // each slot should have a group with a slot\n            // if the group id already exists, skip\n            // else, make new group with one slot\n      //////////////////////////////////////////////////////\n      const parent_row_keys = Object.keys(new_state.rows)\n\n      let group_key;\n      let parent_group_keys, parent_slot_keys;\n      let parent_row_key, parent_group_key, parent_slot_key;\n      let tmp_parent_row, tmp_parent_group, tmp_parent_slot;\n\n      // Iterate over all rows to get a parent row\n      for (var i=0; i<parent_row_keys.length - 1; i++) {\n        parent_row_key = parseInt(parent_row_keys[i], 10);\n        tmp_parent_row = new_state.rows[parent_row_key];\n        parent_group_keys = Object.keys(tmp_parent_row.groups).sort()\n\n\n        // Iterate over Parent Group Keys\n        for (var j=0; j<parent_group_keys.length; j++) {\n          parent_group_key = parent_group_keys[j];\n          tmp_parent_group = new_state.rows[parent_row_key].groups[parent_group_key];\n          parent_slot_keys = Object.keys(tmp_parent_group.slots).sort()\n\n          // Iterate over slot keys in the parent group\n          for (var k=0; k<parent_slot_keys.length; k++) {\n            parent_slot_key = parent_slot_keys[k];\n            tmp_parent_slot = new_state.rows[parent_row_key].groups[parent_group_key].slots[parent_slot_key];\n            \n            // Calculate Group Key ROW|GROUP|SLOT\n            group_key = `${parent_group_key}${parent_slot_key}`;\n            // console.log(parent_row_key, parent_group_key, parent_slot_key)\n            // console.log(group_key)\n            // console.log(JSON.parse(JSON.stringify(new_state)))\n\n            // Check if this key is in the child row's groups\n            // // We do not want to create a new group if we do not have to\n            if (!(new_state.rows[parent_row_key + 1].groups[group_key] === undefined)) {\n              continue\n            }\n\n            // Add a new group with one slot\n            new_state.rows[parent_row_key + 1].groups[group_key] = {\n              disp: {\n                x: 0,\n                y: 0,\n                width: SLOT_WIDTH,\n                height: SLOT_HEIGHT\n              },\n              sender_group: parent_group_key,\n              sender_slot: parent_slot_key,\n              slots: {\n                0: {\n                  disp: {\n                    x: 0,\n                    y: 0,\n                    width: SLOT_WIDTH,\n                    height: SLOT_HEIGHT\n                  },\n                  active_connections: [false, false, false, false],\n                  render: false\n                }\n              }\n            }\n          }\n        }\n      }\n\n\n      //////////////////////////////////////////////////////\n      // Calculate Child Position\n      //////////////////////////////////////////////////////\n      const child_row = new_state.rows[child_row_pos]\n      const child_group = child_row.groups[child_group_pos]\n\n      // Prepare arguments for propogation\n      const slot_position = {\n        row: child_row_pos, \n        group: child_group_pos, \n        slot: child_slot_pos\n      }\n\n      const slot = {\n        disp: {\n          x: 0,\n          y: 0,\n          height: SLOT_HEIGHT,\n          width: SLOT_WIDTH\n        },\n        active_connections: [],\n        render: true,\n        hash: action.hash\n      }\n\n\n      //////////////////////////////////////////////////////\n      // Add Child Node to State\n      //////////////////////////////////////////////////////\n      new_state.rows[child_row_pos].groups[child_group_pos].slots[child_slot_pos] = slot\n      new_state.rows[parent_row_pos].groups[parent_group_pos].slots[parent_slot_pos].active_connections.push(child_slot_pos)\n      \n      //////////////////////////////////////////////////////\n      // Propogate changes after adding new slot\n      //////////////////////////////////////////////////////\n      new_state = propogateWidth(\n        {...new_state}, \n        parent_row_keys.length - 1, \n      );\n      \n      return new_state\n\n    }\n    default: { return state };\n  }\n\n}\n\nconst TreePosStoreProvider = (params) => {\n\n  const init_card_pos = {\n    rows: {\n      0: {\n        disp: {\n          x: 0,\n          y: 0,\n          height: SLOT_HEIGHT,\n          width: SLOT_WIDTH\n        },\n        groups: {\n          0: {\n            disp: {\n              x: 0,\n              y: 0,\n              height: SLOT_HEIGHT,\n              width: SLOT_WIDTH\n            },\n            slots: {\n              0: {\n                disp: {\n                  x: 0,\n                  y: 0,\n                  height: SLOT_HEIGHT,\n                  width: SLOT_WIDTH\n                },\n                active_connections: [],\n                render: true,\n                hash: Base64.stringify(sha256(0))\n              }\n            }\n          }\n        }\n      },\n    }\n  }\n\n  const [treePosStoreState, treePosStoreDispatch] = React.useReducer((state, action) => TreePosReducer(state, action), init_card_pos);\n\n  return (\n    <TreePosStoreStateContext.Provider value={ treePosStoreState }>\n      <TreePosStoreDispatchContext.Provider value ={ treePosStoreDispatch }>\n        {params.children}\n      </TreePosStoreDispatchContext.Provider>\n    </TreePosStoreStateContext.Provider>\n  )\n}\n\n\n\n\nconst useTreePosStoreState = () => {\n  const context = React.useContext(TreePosStoreStateContext);\n  if (context === undefined) {\n    alert(\"Please place useSVGCardStoreState in TreePosStoreStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useTreePosStoreDispatch = () => {\n  const context = React.useContext(TreePosStoreDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useSVGCardStoreState in TreePosStoreDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\n\nexport { TreePosStoreProvider, useTreePosStoreState, useTreePosStoreDispatch }\n\n","import React from 'react';\n\nconst DialogStateContext = React.createContext(null);\nconst DialogDispatchContext = React.createContext(null);\n\nconst DialogContextProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [openDialog, setOpenDialog] = React.useState(false);\n\n\treturn (\n\t\t<DialogStateContext.Provider value={ openDialog }>\n\t\t\t<DialogDispatchContext.Provider value={ setOpenDialog }>\n\t\t\t\t{children}\n\t\t\t</DialogDispatchContext.Provider>\n\t\t</DialogStateContext.Provider>\n\t)\n}\n\nconst useDialogState = () => {\n  const context = React.useContext(DialogStateContext);\n  if (context === undefined) {\n    alert(\"Please place useDialogState in DialogStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useDialogDispatch = () => {\n  const context = React.useContext(DialogDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useDialogDispatch in DialogDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { DialogContextProvider, useDialogState, useDialogDispatch };","import React from 'react';\nimport sha256 from 'crypto-js/sha256';\n\nconst CurrentLayerStateContext = React.createContext(null);\nconst CurrentLayerDispatchContext = React.createContext(null);\n\nconst CurrentLayerContextProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [currentLayer, setCurrentLayer] = React.useState(sha256(0));\n\n\treturn (\n\t\t<CurrentLayerStateContext.Provider value={ currentLayer }>\n\t\t\t<CurrentLayerDispatchContext.Provider value={ setCurrentLayer }>\n\t\t\t\t{children}\n\t\t\t</CurrentLayerDispatchContext.Provider>\n\t\t</CurrentLayerStateContext.Provider>\n\t)\n}\n\nconst useCurrentLayerState = () => {\n  const context = React.useContext(CurrentLayerStateContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerState in CurrentLayerStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useCurrentLayerDispatch = () => {\n  const context = React.useContext(CurrentLayerDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerDispatch in CurrentLayerDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { CurrentLayerContextProvider, useCurrentLayerState, useCurrentLayerDispatch };","import React from 'react';\nimport sha256 from 'crypto-js/sha256';\nimport Base64 from 'crypto-js/enc-base64';\n\nconst LayerInfoStoreStateContext = React.createContext(null);\nconst LayerInfoStoreDispatchContext = React.createContext(null);\n\nconst LayerInfoStoreProvider = ({children}) => {\n\n\t// Define Hook\n\tconst [layerInfoStoreState, layerInfoStoreDispatch] = React.useReducer((state, action) => {\n\n    switch (action.type) {\n      case 'add': {\n        state[[action.layerID]] = action.layer_info;\n        return state;\n      }\n    }\n  }, {\n    [Base64.stringify(sha256(0))]: {\n      layer_name: 'Input Layer',\n      layer_type: 'input_layer',\n      layer_params: {}\n    }\n  })\n\n\treturn (\n\t\t<LayerInfoStoreStateContext.Provider value={ layerInfoStoreState }>\n\t\t\t<LayerInfoStoreDispatchContext.Provider value={ layerInfoStoreDispatch }>\n\t\t\t\t{children}\n\t\t\t</LayerInfoStoreDispatchContext.Provider>\n\t\t</LayerInfoStoreStateContext.Provider>\n\t)\n}\n\nconst useLayerInfoStoreState = () => {\n  const context = React.useContext(LayerInfoStoreStateContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerState in LayerInfoStoreStateContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nconst useLayerInfoStoreDispatch = () => {\n  const context = React.useContext(LayerInfoStoreDispatchContext);\n  if (context === undefined) {\n    alert(\"Please place useCurrentLayerDispatch in LayerInfoStoreDispatchContext\");\n    return;\n  } else {\n    return context\n  }\n}\n\nexport { LayerInfoStoreProvider, useLayerInfoStoreState, useLayerInfoStoreDispatch };","import React from 'react';\nimport sha256 from 'crypto-js/sha256';\nimport Base64 from 'crypto-js/enc-base64';\n\n\n// Import Styles\n// import { useSVGStyles } from './styles';\n\n// Import Custom Components\nimport LayerCardSVG from './SVGComponents/LayerCardSVG';\n\n// Import Contexts\nimport { useTreePosStoreState, useTreePosStoreDispatch } from './AppStores/TreePosStore';\nimport { useDialogDispatch } from './AppStores/DialogContext';\nimport { useCurrentLayerDispatch } from './AppStores/CurrentLayerContext';\nimport { useLayerInfoStoreState } from './AppStores/LayerInfoStore';\n\n///////////////////////////////////////////////////////////\n// TensorShow App\n///////////////////////////////////////////////////////////\nconst dpi = window.devicePixelRatio;\nconsole.log(dpi)\n\n\nexport default function LayerTree() {\n\n  // Enter into CardPosContext\n  const cardPosState = useTreePosStoreState();\n  const cardPosDispatch = useTreePosStoreDispatch();\n\n  const dialogDispatch = useDialogDispatch();\n  const currentLayerDispatch = useCurrentLayerDispatch();\n\n  const layerInfoStoreState = useLayerInfoStoreState();\n\n  // Initialize Data Structure on UseEffect launch\n  React.useEffect(() => {\n    cardPosDispatch({type: 'init'})\n  }, [])\n\n  const addChild = (event, sender_pos) => {\n    event.preventDefault()\n    \n\n    // Step 1 (Create Hash)\n    // const hash = Base64.stringify(sha256(new Date, Math.random()*10000000));\n    const hash = Math.random()*1000000;\n    // console.log(hash)\n\n    // Step 2 (Set currently selected Layer to hash)\n    currentLayerDispatch({hash: hash, sender_pos: sender_pos});\n\n    // Step 3 (Set dialogDispatch)\n    dialogDispatch(true);\n    return;\n  }\n\n  // Initialize Dialog Hook\n  const [open, setOpen] = React.useState(false);\n  const editLayer = (event) => {\n    event.preventDefault();\n    dialogDispatch(true);\n  }\n\n  /////////////////////////////////////////////////////////\n  // REMEMBER: cardPosState keys are all integers, \n  // so it is more precise to iterate in order\n  /////////////////////////////////////////////////////////\n\n  // Iterate over the cardPosState\n  let style;\n  let row_key, group_key, slot_key;\n  let group_keys, slot_keys;\n  let row, group, slot, disp;\n  let row_svg, group_svg, slot_svg;\n  let group_count, slot_count;\n\n  // layer_info\n  let layer_info;\n\n  // bezier curve variables\n  var start_point, end_point;\n  var bezier_points = [];\n  var next_group_subkey;\n  var tmp_slot_keys, tmp_slot;\n  var tmp_group;\n\n  var canvas_elements = []\n\n  // Iterate over all rows\n  var row_svgs = []\n  const pos_tree = {...cardPosState}\n  const row_keys = Object.keys(pos_tree.rows);\n  const row_count = row_keys.length;\n  for (var i=0; i<row_count; i++) {\n\n    // Iterate over all groups, add group_svg to group_svgs\n    var group_svgs = []\n    row_key = parseInt(row_keys[i], 10)\n    row = pos_tree.rows[row_key]\n    group_keys = Object.keys(row.groups)\n    group_count = group_keys.length;\n    for (var j=0; j<group_count; j++) {\n\n      // Iterate over all slots, add slot_svg to slot_svgs\n      var slot_svgs = []\n      group_key = group_keys[j]\n      group = row.groups[group_key]\n\n      slot_keys = Object.keys(group.slots)\n      slot_count = slot_keys.length;\n      for (var k=0; k<slot_count; k++) {\n\n        // Render slot_svg, add to slot_svgs\n        slot_key = slot_keys[k]\n        slot = group.slots[slot_key];\n        disp = slot.disp;\n\n        // Render or placeholder\n        \n        style = {\n          position: 'absolute',\n          top: disp.y,\n          left: disp.x,\n          height: disp.height,\n          width: disp.width,\n          textAlign: 'center',\n          // backgroundColor: \"#FF0000\",\n        }\n\n        if (slot.render) {\n          layer_info = layerInfoStoreState[slot.hash]\n          slot_svg = (\n            <div style={style} key={`${row_key}${group_key}${slot_key}`}>\n              <LayerCardSVG\n                x={disp.x}\n                y={disp.y}\n                addChild={addChild}\n                editLayer={editLayer}\n                sender_pos={{row: i, group: group_key, slot: slot_key}}\n                layerName={`${group_key}${slot_key}`}\n              />\n              </div>\n            )\n          slot_svgs.push(slot_svg)\n          \n\n          // Check if next row exists\n          if (pos_tree.rows[row_key + 1]) {\n\n            \n            // Instantiate the canvas\n            var canv_params = {\n              start_y: pos_tree.rows[row_key].disp.y + 200,\n              end_y: pos_tree.rows[row_key + 1].disp.y,\n              start_x: group.disp.x + slot.disp.x,\n              end_x: group.disp.x + slot.disp.x + slot.disp.width\n            }\n\n            // Calculate points for Bezier Curves in this canvas\n            var bezier_points = [];\n            start_point = [(canv_params.end_x - canv_params.start_x) / 2, 0];\n\n            // Calculate entities for next row, group and slots\n            tmp_group = pos_tree.rows[row_key + 1].groups[`${group_key}${slot_key}`];\n            tmp_slot_keys = Object.keys(tmp_group.slots);\n\n            // Iterate over slots, find if renderable, if so, add end_pos\n            for (var q=0; q<tmp_slot_keys.length; q++) {\n              tmp_slot = tmp_group.slots[tmp_slot_keys[q]];\n              if (tmp_slot.render) {\n                end_point = [\n                    tmp_slot.disp.x + tmp_slot.disp.width / 2,\n                    canv_params.end_y - canv_params.start_y\n                  ]; \n\n                // Draw Bezier Curve\n                bezier_points.push(\n                  <path stroke=\"black\" strokeWidth={4} fill=\"transparent\" d={\n                    `\n                    M ${start_point[0]} ${start_point[1]}\n                    C ${start_point[0]} ${start_point[1] + 50}, ${end_point[0]} ${end_point[1] - 50},\n                    ${end_point[0]} ${end_point[1]}\n                    `\n                  }/>)\n              }\n            }\n\n            canvas_elements.push(\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: canv_params.start_x,\n                  top: canv_params.start_y,\n                  width: canv_params.end_x - canv_params.start_x,\n                  height: canv_params.end_y - canv_params.start_y,\n                }}>\n                <svg \n                  height={canv_params.end_y - canv_params.start_y}\n                  width={canv_params.end_x - canv_params.start_x}>\n                  {bezier_points}\n                </svg>\n              </div>\n            )\n\n          }\n        }\n      }\n\n      // Render group_svg, add to group_svgs\n      disp = group.disp;\n      style = {\n          position: 'absolute',\n          top: disp.y,\n          left: disp.x,\n          height: disp.height,\n          width: disp.width,\n          // backgroundColor: \"#00FF00\",\n          // border: '2px solid black'\n        }\n      group_svg = (\n        <div style={style} key={`${row_key}${group_key}`}>\n          {slot_svgs}\n        </div>\n        )\n      group_svgs.push(group_svg)\n\n    }\n\n    // Render row_svg, add to row_svgs\n    disp = row.disp;\n    style = {\n          zIndex: 100,\n          position: 'absolute',\n          top: disp.y,\n          left: disp.x,\n          height: disp.height,\n          width: disp.width,\n          // backgroundColor: \"#0000FF\",\n          // border: '5px dashed black'\n        }\n    row_svg = (\n      <div style={style} key={`${row_key}`}>\n          {group_svgs}\n      </div>\n      )\n    row_svgs.push(row_svg)\n  }\n\n  const TreeSVG = (\n    <div x={0} y={0} width={10000} height={10000}>\n      {row_svgs}\n    </div>\n  )\n\n  ////////////////////////////////////////////////////////////////////////\n  // Render Canvases between elements\n  ////////////////////////////////////////////////////////////////////////\n\n  // // // Create Canvas Reference\n  // // const canvasRef = React.useRef(null);\n  // // const canvas_height = 100 ;\n  // // const canvas_width = 100;\n  \n  // // Render paths on Canvas\n  // React.useEffect(() => {\n  //   let canvas_params, canvas, ctx;\n  //   let bezier_points, start_point, end_point;\n\n  //   for (var canvas_ind=0; canvas_ind<canvas_elements.length; canvas_ind++) {\n  //     canvas = document.getElementById(`canvas:${canvas_ind}`)\n  //     ctx = canvas.getContext('2d')\n  //     ctx.scale(dpi, dpi)\n\n  //     canvas_params = canvas_elements[canvas_ind];\n  //     console.log(canvas_params.ele)\n  //     bezier_points = canvas_params.bezier_points;\n\n  //     for (var bezier_points_ind=0; bezier_points_ind<bezier_points.length; bezier_points_ind++) {\n  //       start_point = bezier_points[bezier_points_ind][0];\n  //       end_point = bezier_points[bezier_points_ind][1]\n  //       console.log(start_point, end_point)\n        \n  //       ctx.beginPath();\n  //       ctx.moveTo(...start_point);\n  //       ctx.lineTo(end_point[0], end_point[1]);\n  //       ctx.stroke();\n  //     } \n\n  //   }\n\n  // })\n\n  return (\n    <div style={{width: 10000, height:10000}}>\n    {canvas_elements}\n    {TreeSVG}\n    </div>\n    )\n}","import React from 'react';\n\n// Import Components\nimport { \n\tDialog, \n\tDialogTitle, \n\tDialogContent, \n\tDialogContentText, \n\tDialogActions } from '@material-ui/core';\n\nimport {\n\tButton } from '@material-ui/core';\n\n// Import Contexts\nimport { useTreePosStoreState, useTreePosStoreDispatch } from '../AppStores/TreePosStore';\nimport { useDialogState, useDialogDispatch } from '../AppStores/DialogContext';\nimport { useCurrentLayerState } from '../AppStores/CurrentLayerContext';\nimport { useLayerInfoStoreState, useLayerInfoStoreDispatch } from '../AppStores/LayerInfoStore';\n\n// Import Constants\nimport {CONV, POOL, FULL} from '../constants';\n\n\nconst getLayerOptions = (parent_layer_type) => {\n\t// Given the parent layer type, what are the possible next layers\n\tswitch (parent_layer_type) {\n\t\tcase CONV: {\n\t\t\treturn [CONV, POOL, FULL]\n\t\t}\n\t\tcase POOL: {\n\t\t\treturn [CONV, POOL, FULL]\n\t\t}\n\t\tcase FULL: {\n\t\t\treturn [FULL]\n\t\t}\n\t}\n}\n\nfunction onlyUnique(value, index, self) { \n    return self.indexOf(value) === index;\n}\n\nexport default function EditLayer() {\n\n\t// Necessary Information\n\t// 1) LayerID (where do we store the new information)\n\t// 2) Layer Information (do we start from scratch or is there old information to update)\n\t// 3) Parent Type (this is how we limit what options the next layer can be)\n\n\t// Enter into the context of this dialog\n\tconst dialogState = useDialogState();\n\tconst dialogDispatch = useDialogDispatch();\n\n\tconst currentLayerState = useCurrentLayerState();\n\tconst new_hash = currentLayerState.hash;\n\tconst sender_pos = currentLayerState.sender_pos;\n\n\tconst treePosState = useTreePosStoreState();\n\tconst treePosDispatch = useTreePosStoreDispatch();\n\n\tconst layerInfoStoreState = useLayerInfoStoreState();\n\tconst layerInfoStoreDispatch = useLayerInfoStoreDispatch();\n\n\tconst handleAdd = (event) => {\n\t\tevent.preventDefault();\n\n\t\t// Calculate sender connection position\n\t\tvar tree = treePosState;\n\t\tvar parent = tree.rows[sender_pos.row].groups[sender_pos.group].slots[sender_pos.slot];\n\n\t\tvar active_connections = parent.active_connections;\n\t\tactive_connections = active_connections.filter( onlyUnique ); \n\n\t\tconst connection_pos = active_connections.length;\n\n\t\t////////////////////////////////////\n\t\t// LIMIT ACTIVE CONNECTIONS TO N=5\n\t\t////////////////////////////////////\n\t\tif (connection_pos > 4) {\n\t\t\talert(\"Limit Number of Connections Exceeded (N = 5)\");\n\t\t\tdialogDispatch(false);\n\t\t\treturn;\n\t\t}\n\n\t\tlet new_sender_pos = {...sender_pos, connection: connection_pos}\n\n\t\t// console.log(\"Sending Dispatch Signal\")\n\t\t// Step 2) Register new layer to layer_tree with associated hash (for retrieval)\n\t\ttreePosDispatch({\n\t\t\ttype: 'add_child', \n\t\t\tsender_pos: new_sender_pos, \n\t\t\thash: new_hash,\n\t\t});\n\t\t// console.log(\"Ending Dispatch Signal\")\n\n\t\t// Step 1) Register layerID and layer_info to LayerInfoStore\n\t\tlayerInfoStoreDispatch({type: 'add', layerID: new_hash, layer_info: {layer_name: 'layer1'}})\n\t\t\n\t\t// Step 3) Close Dialoge\n\t\tdialogDispatch(false);\n\n\t}\n\n\tconst handleDelete = (event) => {\n\n\t\ttreePosDispatch({\n\t\t\ttype: 'delete_node', \n\t\t\tsender_pos: sender_pos\n\t\t});\n\n\t\tdialogDispatch(false);\n\n\t}\n\n\tconst handleCancel = (event) => {\n\t\tevent.preventDefault();\n\t\tdialogDispatch(false);\n\n\t}\n\n\t// // Pull Parameters\n\t// const layerID = params.layerID;\n\t// const layer_info = params.layer_info;\n\n\t// // Calculate necessary constants\n\t// let layer_params;\n\t// layer_params = (layer_info.params === undefined) ? null: layer_info.params;\n\n\t// let layer_type;\n\t// layer_type = (layer_info.layer_type === undefined) ? CONV: layer_info.layer_type;\n\n\t// const parent_type = layer_info.parent_type;\n\t// const next_layer_options = getLayerOptions(parent_type);\n\n\treturn (\n\t\t<Dialog open={dialogState} onClose={() => dialogDispatch(false)}>\n\t\t\t<DialogTitle style={{display: 'inline', float: 'left'}}>EditLayer</DialogTitle>\n\t\t\t<DialogActions>\n        <Button onClick={handleCancel} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleAdd} color=\"primary\">\n          Add\n        </Button>\n        <Button onClick={handleDelete} color=\"primary\">\n        \tDelete \n        </Button>\n      </DialogActions>\n\t\t</Dialog>\n\t)\n\n\n\n\n}\n","import React from 'react';\n\n// Import Custom Components\nimport LayerTree from './LayerTree';\nimport EditLayer from './Dialogs/EditLayer';\n\n\nexport default function TensorShow() {\n\n\n  return (\n    <div>\n      <LayerTree/>\n      <EditLayer/>\n    </div>\n  )\n}","import React from 'react';\n\n// Import styles\nimport { useStyles } from './styles';\n\n// Import Custom Components\nimport TensorShow from './TensorShow';\n\n// Import Contexts\nimport { TreePosStoreProvider } from './AppStores/TreePosStore';\nimport { DialogContextProvider } from './AppStores/DialogContext';\nimport { CurrentLayerContextProvider } from './AppStores/CurrentLayerContext';\nimport { LayerInfoStoreProvider } from './AppStores/LayerInfoStore';\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.app}>\n     \n      <TreePosStoreProvider>\n      <CurrentLayerContextProvider>\n      <DialogContextProvider>\n      <LayerInfoStoreProvider>\n      \n          <TensorShow/>\n\n      </LayerInfoStoreProvider>\n      </DialogContextProvider>\n      </CurrentLayerContextProvider>\n      </TreePosStoreProvider>\n\n   </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}